(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[65606],{128064:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return J}});var t,e,o,p,c,l,i,u,r,k,d={};a.r(d),a.d(d,{default:function(){return S}});var h={};a.r(h),a.d(h,{demoComponents:function(){return W},demos:function(){return U},docs:function(){return O},srcComponents:function(){return Y}});var m=a(778521),g=a(470079),y=a.t(g,2),f=a(652755),b=a(201349),v=a(639519),C=a(981691),w=/;\n/,x=function(n){for(var s={},a=n.split(w),t=0;t<a.length;t++){var e=(a[t]||"").trim();if(e){var o=e.indexOf(":");if(-1===o)continue;var p=e.substr(0,o).trim(),c=e.substr(o+1).trim();s[p]=c}}return s},j=function(n){"string"==typeof n.style&&(n.style=x(n.style))},S=function(){return{onProcessRule:j}},M=a(653048),T=a(337291),P=a(577814),N=a(735250),D={background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"},H=(0,T.Z)(function(n){return{root:{background:n.background,border:0,fontSize:16,borderRadius:3,boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)",color:"white",height:48,padding:"0 30px"}}});function R(){var n=H();return(0,N.jsx)("button",{type:"button",className:n.root,children:"Theming"})}var $=a(191138);function B(){var n=(0,$.Z)();return(0,N.jsx)("span",{children:"spacing ".concat(n.spacing)})}var F=(0,a(323025).Z)(function(n){return(0,N.jsx)("span",{children:"spacing ".concat(n.theme.spacing)})}),Z=(0,T.Z)(function(n){return{root:{background:n.background,border:0,fontSize:16,borderRadius:3,boxShadow:n.boxShadow,color:"white",height:48,padding:"0 30px"}}});function A(){var n=Z();return(0,N.jsx)("button",{type:"button",className:n.root,children:"Theme nesting"})}var K=a(614030),I=a(947950),E=a(543176),G=(0,C.create)({plugins:[S()].concat((0,K.Z)((0,I.Z)().plugins))}),_=(0,T.Z)({root:"\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  "});function q(){var n=_();return(0,N.jsx)("button",{type:"button",className:n.root,children:"String templates"})}var z=(0,T.Z)({"@global":{".cssjss-advanced-global-root":{height:100,width:100,backgroundColor:"blue"},".cssjss-advanced-global-child":{height:8,backgroundColor:"red"}}}),L=(0,T.Z)({root:{"&.root":{height:100,width:100,backgroundColor:"blue"},"& .child":{height:8,backgroundColor:"red"}}}),O={en:{description:"This section covers more advanced usage of @mui/styles.",location:"/docs/data/styles/advanced/advanced.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="error-icon" viewBox="0 0 20 20">\n      <path fill-rule="evenodd" d="M2 7.4v5.2a2 2 0 0 0 .586 1.414l3.4 3.4A2 2 0 0 0 7.4 18h5.2a2 2 0 0 0 1.414-.586l3.4-3.4A2 2 0 0 0 18 12.6V7.4a2 2 0 0 0-.586-1.414l-3.4-3.4A2 2 0 0 0 12.6 2H7.4a2 2 0 0 0-1.414.586l-3.4 3.4A2 2 0 0 0 2 7.4Zm11.03-.43a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="warning-icon" viewBox="0 0 20 20">\n      <path d="M2.33 17a.735.735 0 0 1-.665-.375.631.631 0 0 1-.094-.375.898.898 0 0 1 .115-.396L9.353 3.062a.621.621 0 0 1 .281-.27.85.85 0 0 1 .729 0 .622.622 0 0 1 .281.27l7.667 12.792c.07.125.108.257.114.396a.63.63 0 0 1-.093.375.842.842 0 0 1-.271.27.728.728 0 0 1-.394.105H2.33Zm7.664-2.5c.211 0 .39-.072.536-.214a.714.714 0 0 0 .218-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.531-.22.736.736 0 0 0-.536.215.714.714 0 0 0-.219.531c0 .212.072.39.215.536.143.146.32.219.531.219Zm0-2.5c.211 0 .39-.072.536-.216a.72.72 0 0 0 .218-.534v-2.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.531-.216.734.734 0 0 0-.536.216.72.72 0 0 0-.219.534v2.5c0 .212.072.39.215.534a.72.72 0 0 0 .531.216Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="success-icon" viewBox="0 0 20 20">\n      <path d="m8.938 10.875-1.25-1.23a.718.718 0 0 0-.521-.228.718.718 0 0 0-.521.229.73.73 0 0 0 0 1.062l1.77 1.771c.153.153.327.23.521.23a.718.718 0 0 0 .521-.23l3.896-3.896a.73.73 0 0 0 0-1.062.718.718 0 0 0-.52-.23.718.718 0 0 0-.521.23l-3.376 3.354ZM10 18a7.796 7.796 0 0 1-3.104-.625 8.065 8.065 0 0 1-2.552-1.719 8.064 8.064 0 0 1-1.719-2.552A7.797 7.797 0 0 1 2 10c0-1.111.208-2.15.625-3.115a8.064 8.064 0 0 1 4.27-4.26A7.797 7.797 0 0 1 10 2c1.111 0 2.15.208 3.115.625a8.096 8.096 0 0 1 4.26 4.26C17.792 7.851 18 8.89 18 10a7.797 7.797 0 0 1-.625 3.104 8.066 8.066 0 0 1-4.26 4.271A7.774 7.774 0 0 1 10 18Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="info-icon" viewBox="0 0 20 20">\n      <path d="M9.996 14c.21 0 .39-.072.535-.216a.72.72 0 0 0 .219-.534v-3.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.532-.216.734.734 0 0 0-.535.216.72.72 0 0 0-.219.534v3.5c0 .213.071.39.214.534a.72.72 0 0 0 .532.216Zm0-6.5c.21 0 .39-.071.535-.214a.714.714 0 0 0 .219-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.532-.219.736.736 0 0 0-.535.214.714.714 0 0 0-.219.532c0 .21.071.39.214.535.143.146.32.219.532.219Zm.01 10.5a7.81 7.81 0 0 1-3.11-.625 8.065 8.065 0 0 1-2.552-1.719 8.066 8.066 0 0 1-1.719-2.551A7.818 7.818 0 0 1 2 9.99c0-1.104.208-2.14.625-3.105a8.066 8.066 0 0 1 4.27-4.26A7.818 7.818 0 0 1 10.009 2a7.75 7.75 0 0 1 3.106.625 8.083 8.083 0 0 1 4.26 4.265A7.77 7.77 0 0 1 18 9.994a7.81 7.81 0 0 1-.625 3.11 8.066 8.066 0 0 1-1.719 2.552 8.083 8.083 0 0 1-2.546 1.719 7.77 7.77 0 0 1-3.104.625Z"/>\n      </symbol>\n      </svg>','\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n        <symbol id="anchor-link-icon" viewBox="0 0 12 6">\n          <path d="M8.9176 0.083252H7.1676C6.84677 0.083252 6.58427 0.345752 6.58427 0.666585C6.58427 0.987419 6.84677 1.24992 7.1676 1.24992H8.9176C9.8801 1.24992 10.6676 2.03742 10.6676 2.99992C10.6676 3.96242 9.8801 4.74992 8.9176 4.74992H7.1676C6.84677 4.74992 6.58427 5.01242 6.58427 5.33325C6.58427 5.65409 6.84677 5.91659 7.1676 5.91659H8.9176C10.5276 5.91659 11.8343 4.60992 11.8343 2.99992C11.8343 1.38992 10.5276 0.083252 8.9176 0.083252ZM3.6676 2.99992C3.6676 3.32075 3.9301 3.58325 4.25094 3.58325H7.75094C8.07177 3.58325 8.33427 3.32075 8.33427 2.99992C8.33427 2.67909 8.07177 2.41659 7.75094 2.41659H4.25094C3.9301 2.41659 3.6676 2.67909 3.6676 2.99992ZM4.83427 4.74992H3.08427C2.12177 4.74992 1.33427 3.96242 1.33427 2.99992C1.33427 2.03742 2.12177 1.24992 3.08427 1.24992H4.83427C5.1551 1.24992 5.4176 0.987419 5.4176 0.666585C5.4176 0.345752 5.1551 0.083252 4.83427 0.083252H3.08427C1.47427 0.083252 0.167603 1.38992 0.167603 2.99992C0.167603 4.60992 1.47427 5.91659 3.08427 5.91659H4.83427C5.1551 5.91659 5.4176 5.65409 5.4176 5.33325C5.4176 5.01242 5.1551 4.74992 4.83427 4.74992Z" />\n        </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n      <path d="M22.8481 4C22.8481 2.9 21.9481 2 20.8481 2H4.84814C3.74814 2 2.84814 2.9 2.84814 4V16C2.84814 17.1 3.74814 18 4.84814 18H18.8481L22.8481 22V4ZM16.8481 11H13.8481V14C13.8481 14.55 13.3981 15 12.8481 15C12.2981 15 11.8481 14.55 11.8481 14V11H8.84814C8.29814 11 7.84814 10.55 7.84814 10C7.84814 9.45 8.29814 9 8.84814 9H11.8481V6C11.8481 5.45 12.2981 5 12.8481 5C13.3981 5 13.8481 5.45 13.8481 6V9H16.8481C17.3981 9 17.8481 9.45 17.8481 10C17.8481 10.55 17.3981 11 16.8481 11Z" />\n      </symbol>\n      </svg>','<h1>Advanced (LEGACY)</h1><p class="description">This section covers more advanced usage of @mui/styles.</p>\n\n<aside class="MuiCallout-root MuiCallout-error">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#error-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p><code>@mui/styles</code> was deprecated with the release of MUI\xa0Core v5 in late 2021.\nIt depended on <a href="https://cssinjs.org/">JSS</a> as a styling solution, which is no longer used in <code>@mui/material</code>.</p>\n<p><code>@mui/styles</code> is not compatible with <a href="https://react.dev/reference/react/StrictMode">React.StrictMode</a> or React 18, and it will not be updated.</p>\n<p>This documentation remains here for those working on legacy projects, but we <strong>strongly discourage</strong> you from using <code>@mui/styles</code> when creating a new app with Material\xa0UIâ€”you <em>will</em> face unresolvable dependency issues.</p>\n<p>Please use <a href="/system/getting-started/"><code>@mui/system</code></a> instead.</p>\n\n</div></aside><h2 id="theming"><a href="#theming" class="title-link-to-anchor">Theming<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="theming"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Add a <code>ThemeProvider</code> to the top level of your app to pass a theme down the React component tree. Then, you can access the theme object in style functions.</p>\n<aside class="MuiCallout-root MuiCallout-info">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#info-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>This example creates a theme object for custom-built components. If you intend to use some of Material\xa0UI&#39;s components you need to provide a richer theme structure using the <code>createTheme()</code> method. Head to the <a href="/material-ui/customization/theming/">theming section</a> to learn how to build your custom Material\xa0UI theme.</p>\n\n</div></aside><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> DeepChild <span class="token keyword">from</span> <span class="token string">\'./my_components/DeepChild\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">\'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Theming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DeepChild</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n',{demo:"Theming.js"},'<h3 id="accessing-the-theme-in-a-component"><a href="#accessing-the-theme-in-a-component" class="title-link-to-anchor">Accessing the theme in a component<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="accessing-the-theme-in-a-component"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>You might need to access the theme variables inside your React components.</p>\n<h4><code>useTheme</code> hook</h4><p>For use in function components:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">DeepChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">spacing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>theme<span class="token punctuation">.</span>spacing<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n',{demo:"UseTheme.js"},'<h4><code>withTheme</code> HOC</h4><p>For use in class or function components:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> withTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">DeepChildRaw</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">spacing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>spacing<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> DeepChild <span class="token operator">=</span> <span class="token function">withTheme</span><span class="token punctuation">(</span>DeepChildRaw<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n',{demo:"WithTheme.js"},'<h3 id="theme-nesting"><a href="#theme-nesting" class="title-link-to-anchor">Theme nesting<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="theme-nesting"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>You can nest multiple theme providers.\nThis can be really useful when dealing with different areas of your application that have distinct appearance from each other.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>outerTheme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child1</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>innerTheme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child2</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n',{demo:"ThemeNesting.js"},'<p>The inner theme will <strong>override</strong> the outer theme.\nYou can extend the outer theme by providing a function:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>â€¦<span class="token punctuation">}</span></span> <span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child1</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">outerTheme</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">darkMode</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">...</span>outerTheme <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child2</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="overriding-styles-classes-prop"><a href="#overriding-styles-classes-prop" class="title-link-to-anchor">Overriding styles - <code>classes</code> prop<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="overriding-styles-classes-prop"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>The <code>makeStyles</code> (hook generator) and <code>withStyles</code> (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name.\nThe class names are provided to the component with the <code>classes</code> variable.\nThis is particularly useful when styling nested elements in a component.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// A style sheet</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">makeStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// a style rule</span>\n  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// a nested style rule</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Nested</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* \'jss1\' */</span><span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>label<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token comment">/* \'jss2\' nested */</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Nested</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>However, the class names are often non-deterministic. How can a parent component override the style of a nested element?</p>\n<h3 id="withstyles"><a href="#withstyles" class="title-link-to-anchor"><code>withStyles</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="withstyles"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>This is the simplest case. The wrapped component accepts a <code>classes</code> prop,\nit simply merges the class names provided with the style sheet.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> Nested <span class="token operator">=</span> <span class="token function">withStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// a style rule</span>\n  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// a nested style rule</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> classes <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>label<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token comment">/* \'jss2 my-label\' Nested*/</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Nested</span></span> <span class="token attr-name">classes</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">\'my-label\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="makestyles"><a href="#makestyles" class="title-link-to-anchor"><code>makeStyles</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="makestyles"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">makeStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// a style rule</span>\n  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// a nested style rule</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Nested</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>label<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token comment">/* \'jss2 my-label\' nested */</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Nested</span></span> <span class="token attr-name">classes</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">\'my-label\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="jss-plugins"><a href="#jss-plugins" class="title-link-to-anchor">JSS plugins<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="jss-plugins"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>JSS uses plugins to extend its core, allowing you to cherry-pick the features you need,\nand only pay the performance overhead for what you are using.</p>\n<p>Not all the plugins are available in Material\xa0UI by default. The following (which is a subset of\n<a href="https://cssinjs.org/jss-preset-default/">jss-preset-default</a>) are included:</p>\n<ul>\n<li><a href="https://cssinjs.org/jss-plugin-rule-value-function/">jss-plugin-rule-value-function</a></li>\n<li><a href="https://cssinjs.org/jss-plugin-global/">jss-plugin-global</a></li>\n<li><a href="https://cssinjs.org/jss-plugin-nested/">jss-plugin-nested</a></li>\n<li><a href="https://cssinjs.org/jss-plugin-camel-case/">jss-plugin-camel-case</a></li>\n<li><a href="https://cssinjs.org/jss-plugin-default-unit/">jss-plugin-default-unit</a></li>\n<li><a href="https://cssinjs.org/jss-plugin-vendor-prefixer/">jss-plugin-vendor-prefixer</a></li>\n<li><a href="https://cssinjs.org/jss-plugin-props-sort/">jss-plugin-props-sort</a></li>\n</ul>\n<p>Of course, you are free to use additional plugins. Here is an example with the <a href="https://github.com/alitaheri/jss-rtl">jss-rtl</a> plugin.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'jss\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StylesProvider<span class="token punctuation">,</span> jssPreset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> rtl <span class="token keyword">from</span> <span class="token string">\'jss-rtl\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> jss <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">jssPreset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plugins<span class="token punctuation">,</span> <span class="token function">rtl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StylesProvider</span></span> <span class="token attr-name">jss</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>jss<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StylesProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="string-templates"><a href="#string-templates" class="title-link-to-anchor">String templates<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="string-templates"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>If you prefer CSS syntax over JSS, you can use the <a href="https://cssinjs.org/jss-plugin-template/">jss-plugin-template</a> plugin.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">makeStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Note that this doesn&#39;t support selectors, or nested rules.</p>\n',{demo:"StringTemplates.js"},'<h2 id="css-injection-order"><a href="#css-injection-order" class="title-link-to-anchor">CSS injection order<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="css-injection-order"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><aside class="MuiCallout-root MuiCallout-warning">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#warning-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>It&#39;s <strong>really important</strong> to understand how the CSS specificity is calculated by the browser, as it&#39;s one of the key elements to know when overriding styles.\nRead this section from the MDN docs for more information: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated">How is specificity calculated?</a></p>\n\n</div></aside><p>By default, the style tags are injected <strong>last</strong> in the <code>&lt;head&gt;</code> element of the page.\nThey gain more specificity than any other style tags on your page for example CSS\xa0Modules, styled components.</p>\n<h3 id="injectfirst"><a href="#injectfirst" class="title-link-to-anchor">injectFirst<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="injectfirst"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The <code>StylesProvider</code> component has an <code>injectFirst</code> prop to inject the style tags <strong>first</strong> in the head (less priority):</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> StylesProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StylesProvider</span></span> <span class="token attr-name">injectFirst</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span><span class="token comment">/* Your component tree.\n      Styled components can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StylesProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="makestyles-withstyles-styled"><a href="#makestyles-withstyles-styled" class="title-link-to-anchor"><code>makeStyles</code> / <code>withStyles</code> / <code>styled</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="makestyles-withstyles-styled"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The injection of style tags happens in the <strong>same order</strong> as the <code>makeStyles</code> / <code>withStyles</code> / <code>styled</code> invocations. For instance the color red wins in this case:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> clsx <span class="token keyword">from</span> <span class="token string">\'clsx\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> makeStyles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> useStylesBase <span class="token operator">=</span> <span class="token function">makeStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'blue\'</span><span class="token punctuation">,</span> <span class="token comment">// \uD83D\uDD35</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">makeStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span> <span class="token comment">// \uD83D\uDD34</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Order doesn\'t matter</span>\n  <span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> classesBase <span class="token operator">=</span> <span class="token function">useStylesBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Order doesn\'t matter</span>\n  <span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token function">clsx</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">,</span> classesBase<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// color: red \uD83D\uDD34 wins.</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>className<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The hook call order and the class name concatenation order <strong>don&#39;t matter</strong>.</p>\n<h3 id="insertionpoint"><a href="#insertionpoint" class="title-link-to-anchor">insertionPoint<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="insertionpoint"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>JSS <a href="https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point">provides a mechanism</a> to control this situation.\nBy adding an <code>insertionPoint</code> within the HTML you can <a href="https://cssinjs.org/jss-api/#attach-style-sheets-in-a-specific-order">control the order</a> that the CSS rules are applied to your components.</p>\n<h4>HTML comment</h4><p>The simplest approach is to add an HTML comment to the <code>&lt;head&gt;</code> that determines where JSS will inject the styles:</p>\n<div class="MuiCode-root"><pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- jss-insertion-point --></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'jss\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StylesProvider<span class="token punctuation">,</span> jssPreset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> jss <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">jssPreset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// Define a custom insertion point that JSS will look for when injecting the styles into the DOM.</span>\n  <span class="token literal-property property">insertionPoint</span><span class="token operator">:</span> <span class="token string">\'jss-insertion-point\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StylesProvider</span></span> <span class="token attr-name">jss</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>jss<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StylesProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h4>Other HTML elements</h4><p><a href="https://github.com/facebook/create-react-app">Create React App</a> strips HTML comments when creating the production build.\nTo get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a <code>&lt;noscript&gt;</code> element:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jss-insertion-point<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'jss\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StylesProvider<span class="token punctuation">,</span> jssPreset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> jss <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">jssPreset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// Define a custom insertion point that JSS will look for when injecting the styles into the DOM.</span>\n  <span class="token literal-property property">insertionPoint</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'jss-insertion-point\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StylesProvider</span></span> <span class="token attr-name">jss</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>jss<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StylesProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h4>JS createComment</h4><p>codesandbox.io prevents access to the <code>&lt;head&gt;</code> element.\nTo get around this issue, you can use the JavaScript <code>document.createComment()</code> API:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'jss\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StylesProvider<span class="token punctuation">,</span> jssPreset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> styleNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span><span class="token string">\'jss-insertion-point\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>styleNode<span class="token punctuation">,</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> jss <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">jssPreset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// Define a custom insertion point that JSS will look for when injecting the styles into the DOM.</span>\n  <span class="token literal-property property">insertionPoint</span><span class="token operator">:</span> <span class="token string">\'jss-insertion-point\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StylesProvider</span></span> <span class="token attr-name">jss</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>jss<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StylesProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="server-side-rendering"><a href="#server-side-rendering" class="title-link-to-anchor">Server-side rendering<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="server-side-rendering"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>This example returns a string of HTML and inlines the critical CSS required, right before it&#39;s used:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerStyleSheets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> sheets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerStyleSheets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>sheets<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> css <span class="token operator">=</span> sheets<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n&lt;!DOCTYPE html>\n&lt;html>\n  &lt;head>\n    &lt;style id="jss-server-side"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>css<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/style>\n  &lt;/head>\n  &lt;body>\n    &lt;div id="root"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div>\n  &lt;/body>\n&lt;/html>\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>You can <a href="/material-ui/guides/server-rendering/">follow the server-side guide</a> for a more detailed example, or read the <a href="/system/styles/api/#serverstylesheets"><code>ServerStyleSheets</code> API documentation</a>.</p>\n<h3 id="css-prefixing"><a href="#css-prefixing" class="title-link-to-anchor">CSS prefixing<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="css-prefixing"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Be aware that some CSS features <a href="https://github.com/cssinjs/jss/issues/279">require</a> an additional postprocessing step\nthat adds vendor-specific prefixes.\nThese prefixes are automatically added to the client thanks to <a href="https://www.npmjs.com/package/jss-plugin-vendor-prefixer"><code>jss-plugin-vendor-prefixer</code></a>.</p>\n<p>The CSS served on this documentation is processed with <a href="https://www.npmjs.com/package/autoprefixer"><code>autoprefixer</code></a>.\nYou can use <a href="https://github.com/mui/material-ui/blob/47aa5aeaec1d4ac2c08fd0e84277d6b91e497557/pages/_document.js#L123">the documentation implementation</a> as inspiration.\nBe aware that it has an implication with the performance of the page.\nIt&#39;s a must-do for static pages, but it needs to be put in balance with not doing anything when rendering dynamic pages.</p>\n<h3 id="gatsby"><a href="#gatsby" class="title-link-to-anchor">Gatsby<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="gatsby"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>There is <a href="https://github.com/hupe1980/gatsby-plugin-material-ui">an official Gatsby plugin</a> that enables server-side rendering for <code>@mui/styles</code>.\nRefer to the plugin&#39;s page for setup and usage instructions.</p>\n<p>Refer to <a href="https://github.com/mui/material-ui/tree/v4.x/examples/gatsby">this example Gatsby project</a> for an usage example.</p>\n<h3 id="next-js-pages-router"><a href="#next-js-pages-router" class="title-link-to-anchor">Next.js Pages Router<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="next-js-pages-router"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>You need to have a custom <code>pages/_document.js</code>, then copy <a href="https://github.com/mui/material-ui/blob/v4.x/examples/nextjs/pages/_document.js#L52-L59">this logic</a> to inject the server-side rendered styles into the <code>&lt;head&gt;</code> element.</p>\n<p>Refer to <a href="https://github.com/mui/material-ui/tree/v4.x/examples/nextjs">this example project</a> for an up-to-date usage example.</p>\n<h2 id="class-names"><a href="#class-names" class="title-link-to-anchor">Class names<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="class-names"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>The class names are generated by <a href="/system/styles/api/#creategenerateclassname-options-class-name-generator">the class name generator</a>.</p>\n<h3 id="default"><a href="#default" class="title-link-to-anchor">Default<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="default"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>By default, the class names generated by <code>@mui/styles</code> are <strong>non-deterministic</strong>; you can&#39;t rely on them to stay the same. Let&#39;s take the following style as an example:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">makeStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>This will generate a class name such as <code>makeStyles-root-123</code>.</p>\n<p>You have to use the <code>classes</code> prop of a component to override the styles.\nThe non-deterministic nature of the class names enables style isolation.</p>\n<ul>\n<li>In <strong>development</strong>, the class name is: <code>.makeStyles-root-123</code>, following this logic:</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> sheetName <span class="token operator">=</span> <span class="token string">\'makeStyles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ruleName <span class="token operator">=</span> <span class="token string">\'root\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> identifier <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sheetName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ruleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>identifier<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<ul>\n<li>In <strong>production</strong>, the class name is: <code>.jss123</code>, following this logic:</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> productionPrefix <span class="token operator">=</span> <span class="token string">\'jss\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> identifier <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>productionPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>identifier<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>However, when the following conditions are met, the class names are <strong>deterministic</strong>:</p>\n<ul>\n<li>Only one theme provider is used (<strong>No theme nesting</strong>)</li>\n<li>The style sheet has a name that starts with <code>Mui</code> (all Material\xa0UI components).</li>\n<li>The <code>disableGlobal</code> option of the <a href="/system/styles/api/#creategenerateclassname-options-class-name-generator">class name generator</a> is <code>false</code> (the default).</li>\n</ul>\n<h2 id="global-css"><a href="#global-css" class="title-link-to-anchor">Global CSS<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="global-css"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><h3 id="jss-plugin-global"><a href="#jss-plugin-global" class="title-link-to-anchor"><code>jss-plugin-global</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="jss-plugin-global"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The <a href="#jss-plugins"><code>jss-plugin-global</code></a> plugin is installed in the default preset.\nYou can use it to define global class names.</p>\n',{demo:"GlobalCss.js"},'<h3 id="hybrid"><a href="#hybrid" class="title-link-to-anchor">Hybrid<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="hybrid"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>You can also combine JSS generated class names with global ones.</p>\n',{demo:"HybridGlobalCss.js"},'<h2 id="css-prefixes"><a href="#css-prefixes" class="title-link-to-anchor">CSS prefixes<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="css-prefixes"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>JSS uses feature detection to apply the correct prefixes.\n<a href="https://github.com/mui/material-ui/issues/9293">Don&#39;t be surprised</a> if you can&#39;t see a specific prefix in the latest version of Chrome. Your browser probably doesn&#39;t need it.</p>\n<h2 id="typescript-usage"><a href="#typescript-usage" class="title-link-to-anchor">TypeScript usage<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="typescript-usage"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Using <code>withStyles</code> in TypeScript can be a little tricky, but there are some utilities to make the experience as painless as possible.</p>\n<h3 id="using-createstyles-to-defeat-type-widening"><a href="#using-createstyles-to-defeat-type-widening" class="title-link-to-anchor">Using <code>createStyles</code> to defeat type widening<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="using-createstyles-to-defeat-type-widening"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>A frequent source of confusion is TypeScript&#39;s <a href="https://mariusschulz.com/blog/literal-type-widening-in-typescript">type widening</a>, which causes this example not to work as expected:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  root<span class="token operator">:</span> <span class="token punctuation">{</span>\n    display<span class="token operator">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    flexDirection<span class="token operator">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">withStyles</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//         ^^^^^^</span>\n<span class="token comment">//         Types of property \'flexDirection\' are incompatible.</span>\n<span class="token comment">//           Type \'string\' is not assignable to type \'"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "column" | "column-reverse" | "row"...\'.</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The problem is that the type of the <code>flexDirection</code> prop is inferred as <code>string</code>, which is too wide. To fix this, you can pass the styles object directly to <code>withStyles</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token function">withStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  root<span class="token operator">:</span> <span class="token punctuation">{</span>\n    display<span class="token operator">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    flexDirection<span class="token operator">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>However type widening rears its ugly head once more if you try to make the styles depend on the theme:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token function">withStyles</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> palette<span class="token punctuation">,</span> spacing <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  root<span class="token operator">:</span> <span class="token punctuation">{</span>\n    display<span class="token operator">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    flexDirection<span class="token operator">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n    padding<span class="token operator">:</span> spacing<span class="token punctuation">.</span>unit<span class="token punctuation">,</span>\n    backgroundColor<span class="token operator">:</span> palette<span class="token punctuation">.</span>background<span class="token punctuation">.</span>default<span class="token punctuation">,</span>\n    color<span class="token operator">:</span> palette<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>main<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>This is because TypeScript <a href="https://github.com/Microsoft/TypeScript/issues/241">widens the return types of function expressions</a>.</p>\n<p>Because of this, using the <code>createStyles</code> helper function to construct your style rules object is recommended:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token comment">// Non-dependent styles</span>\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  root<span class="token operator">:</span> <span class="token punctuation">{</span>\n    display<span class="token operator">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    flexDirection<span class="token operator">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Theme-dependent styles</span>\n<span class="token keyword">const</span> <span class="token function-variable function">styles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> palette<span class="token punctuation">,</span> spacing <span class="token punctuation">}</span><span class="token operator">:</span> Theme<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    root<span class="token operator">:</span> <span class="token punctuation">{</span>\n      display<span class="token operator">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n      flexDirection<span class="token operator">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n      padding<span class="token operator">:</span> spacing<span class="token punctuation">.</span>unit<span class="token punctuation">,</span>\n      backgroundColor<span class="token operator">:</span> palette<span class="token punctuation">.</span>background<span class="token punctuation">.</span>default<span class="token punctuation">,</span>\n      color<span class="token operator">:</span> palette<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>main<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><code>createStyles</code> is just the identity function; it doesn&#39;t &quot;do anything&quot; at runtime, just helps guide type inference at compile time.</p>\n<h3 id="media-queries"><a href="#media-queries" class="title-link-to-anchor">Media queries<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="media-queries"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><code>withStyles</code> allows a styles object with top level media-queries like so:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  root<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minHeight<span class="token operator">:</span> <span class="token string">\'100vh\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'@media (min-width: 960px)\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    root<span class="token operator">:</span> <span class="token punctuation">{</span>\n      display<span class="token operator">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>To allow these styles to pass TypeScript however, the definitions have to be unambiguous concerning the names for CSS classes and actual CSS property names. Due to this, class names that are equal to CSS properties should be avoided.</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token comment">// error because TypeScript thinks `@media (min-width: 960px)` is a class name</span>\n<span class="token comment">// and `content` is the CSS property</span>\n<span class="token keyword">const</span> ambiguousStyles <span class="token operator">=</span> <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  content<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minHeight<span class="token operator">:</span> <span class="token string">\'100vh\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'@media (min-width: 960px)\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    content<span class="token operator">:</span> <span class="token punctuation">{</span>\n      display<span class="token operator">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// works just fine</span>\n<span class="token keyword">const</span> ambiguousStyles <span class="token operator">=</span> <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  contentClass<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minHeight<span class="token operator">:</span> <span class="token string">\'100vh\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'@media (min-width: 960px)\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    contentClass<span class="token operator">:</span> <span class="token punctuation">{</span>\n      display<span class="token operator">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="augmenting-your-props-using-withstyles"><a href="#augmenting-your-props-using-withstyles" class="title-link-to-anchor">Augmenting your props using <code>WithStyles</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="augmenting-your-props-using-withstyles"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Since a component decorated with <code>withStyles(styles)</code> gets a special <code>classes</code> prop injected, you will want to define its props accordingly:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">styles</span> <span class="token operator">=</span> <span class="token punctuation">(</span>theme<span class="token operator">:</span> Theme<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    root<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">/* ... */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    paper<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">/* ... */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    button<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">/* ... */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  <span class="token comment">// non-style props</span>\n  foo<span class="token operator">:</span> number<span class="token punctuation">;</span>\n  bar<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  <span class="token comment">// injected style props</span>\n  classes<span class="token operator">:</span> <span class="token punctuation">{</span>\n    root<span class="token operator">:</span> string<span class="token punctuation">;</span>\n    paper<span class="token operator">:</span> string<span class="token punctuation">;</span>\n    button<span class="token operator">:</span> string<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>However this isn&#39;t very <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> because it requires you to maintain the class names (<code>&#39;root&#39;</code>, <code>&#39;paper&#39;</code>, <code>&#39;button&#39;</code>, ...) in two different places. We provide a type operator <code>WithStyles</code> to help with this, so that you can just write:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStyles<span class="token punctuation">,</span> WithStyles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">styles</span> <span class="token operator">=</span> <span class="token punctuation">(</span>theme<span class="token operator">:</span> Theme<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    root<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">/* ... */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    paper<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">/* ... */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    button<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">/* ... */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token keyword">extends</span> <span class="token class-name">WithStyles</span><span class="token operator">&lt;</span><span class="token keyword">typeof</span> styles<span class="token operator">></span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> number<span class="token punctuation">;</span>\n  bar<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="decorating-components"><a href="#decorating-components" class="title-link-to-anchor">Decorating components<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="decorating-components"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Applying <code>withStyles(styles)</code> as a function works as expected:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">const</span> DecoratedSFC <span class="token operator">=</span> <span class="token function">withStyles</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> type<span class="token punctuation">,</span> color<span class="token punctuation">,</span> classes <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Typography</span></span> <span class="token attr-name">variant</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>type<span class="token punctuation">}</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span></span> <span class="token attr-name">classes</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">{</span>text<span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Typography</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> DecoratedClass <span class="token operator">=</span> <span class="token function">withStyles</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span><span class="token punctuation">(</span>\n  <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> text<span class="token punctuation">,</span> type<span class="token punctuation">,</span> color<span class="token punctuation">,</span> classes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Typography</span></span> <span class="token attr-name">variant</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>type<span class="token punctuation">}</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span></span> <span class="token attr-name">classes</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n          <span class="token punctuation">{</span>text<span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Typography</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Unfortunately due to a <a href="https://github.com/Microsoft/TypeScript/issues/4881">current limitation of TypeScript decorators</a>, <code>withStyles(styles)</code> can&#39;t be used as a decorator in TypeScript.</p>\n'],toc:[{text:"Theming",level:2,hash:"theming",children:[{text:"Accessing the theme in a component",level:3,hash:"accessing-the-theme-in-a-component"},{text:"Theme nesting",level:3,hash:"theme-nesting"}]},{text:"Overriding styles - classes prop",level:2,hash:"overriding-styles-classes-prop",children:[{text:"withStyles",level:3,hash:"withstyles"},{text:"makeStyles",level:3,hash:"makestyles"}]},{text:"JSS plugins",level:2,hash:"jss-plugins",children:[]},{text:"String templates",level:2,hash:"string-templates",children:[]},{text:"CSS injection order",level:2,hash:"css-injection-order",children:[{text:"injectFirst",level:3,hash:"injectfirst"},{text:"makeStyles / withStyles / styled",level:3,hash:"makestyles-withstyles-styled"},{text:"insertionPoint",level:3,hash:"insertionpoint"}]},{text:"Server-side rendering",level:2,hash:"server-side-rendering",children:[{text:"CSS prefixing",level:3,hash:"css-prefixing"},{text:"Gatsby",level:3,hash:"gatsby"},{text:"Next.js Pages Router",level:3,hash:"next-js-pages-router"}]},{text:"Class names",level:2,hash:"class-names",children:[{text:"Default",level:3,hash:"default"}]},{text:"Global CSS",level:2,hash:"global-css",children:[{text:"jss-plugin-global",level:3,hash:"jss-plugin-global"},{text:"Hybrid",level:3,hash:"hybrid"}]},{text:"CSS prefixes",level:2,hash:"css-prefixes",children:[]},{text:"TypeScript usage",level:2,hash:"typescript-usage",children:[{text:"Using createStyles to defeat type widening",level:3,hash:"using-createstyles-to-defeat-type-widening"},{text:"Media queries",level:3,hash:"media-queries"},{text:"Augmenting your props using WithStyles",level:3,hash:"augmenting-your-props-using-withstyles"},{text:"Decorating components",level:3,hash:"decorating-components"}]}],title:"Advanced (LEGACY)",headers:{components:[]}}},U={"Theming.js":{module:"./Theming.js",raw:"import * as React from 'react';\nimport { ThemeProvider, makeStyles } from '@mui/styles';\n\nconst themeInstance = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theming\n    </button>\n  );\n}\n\nexport default function Theming() {\n  return (\n    <ThemeProvider theme={themeInstance}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n",jsxPreview:"<ThemeProvider theme={themeInstance}>\n  <DeepChild />\n</ThemeProvider>",moduleTS:"./Theming.js",rawTS:"import * as React from 'react';\nimport { ThemeProvider, makeStyles } from '@mui/styles';\n\nconst themeInstance = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nconst useStyles = makeStyles((theme: typeof themeInstance) => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theming\n    </button>\n  );\n}\n\nexport default function Theming() {\n  return (\n    <ThemeProvider theme={themeInstance}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},"UseTheme.js":{module:"./UseTheme.js",raw:"import * as React from 'react';\nimport { ThemeProvider, useTheme } from '@mui/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n\nexport default function UseTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n",jsxPreview:"<ThemeProvider<MyTheme>\n  theme={{\n    spacing: '8px',\n  }}\n>\n  <DeepChild />\n</ThemeProvider>",moduleTS:"./UseTheme.js",rawTS:"import * as React from 'react';\nimport { ThemeProvider, useTheme } from '@mui/styles';\n\ninterface MyTheme {\n  spacing: string;\n}\n\nfunction DeepChild() {\n  const theme = useTheme<MyTheme>();\n\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n\nexport default function UseTheme() {\n  return (\n    <ThemeProvider<MyTheme>\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},"WithTheme.js":{module:"./WithTheme.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider, withTheme } from '@mui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nDeepChildRaw.propTypes = {\n  theme: PropTypes.shape({\n    spacing: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst DeepChild = withTheme(DeepChildRaw);\n\nfunction WithTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n\nexport default WithTheme;\n",moduleTS:"./WithTheme.js",rawTS:"import * as React from 'react';\nimport { ThemeProvider, WithTheme as WithThemeProps, withTheme } from '@mui/styles';\n\ninterface Theme {\n  spacing: string;\n}\n\ninterface Props extends WithThemeProps<Theme> {}\n\nfunction DeepChildRaw(props: Props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme<Theme, typeof DeepChildRaw>(DeepChildRaw);\n\nfunction WithTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n\nexport default WithTheme;\n"},"ThemeNesting.js":{module:"./ThemeNesting.js",raw:"import * as React from 'react';\nimport { ThemeProvider, makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: theme.boxShadow,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theme nesting\n    </button>\n  );\n}\n\nexport default function ThemeNesting() {\n  return (\n    <div>\n      <ThemeProvider\n        theme={{\n          background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        }}\n      >\n        <DeepChild />\n        <br />\n        <br />\n        <ThemeProvider\n          theme={(outerTheme) => ({\n            ...outerTheme,\n            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n            boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n          })}\n        >\n          <DeepChild />\n        </ThemeProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n",moduleTS:"./ThemeNesting.js",rawTS:"import * as React from 'react';\nimport { ThemeProvider, makeStyles } from '@mui/styles';\n\ninterface MyTheme {\n  background: string;\n  boxShadow: string;\n}\n\nconst useStyles = makeStyles((theme: MyTheme) => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: theme.boxShadow,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theme nesting\n    </button>\n  );\n}\n\nexport default function ThemeNesting() {\n  return (\n    <div>\n      <ThemeProvider<MyTheme>\n        theme={{\n          background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        }}\n      >\n        <DeepChild />\n        <br />\n        <br />\n        <ThemeProvider<MyTheme>\n          theme={(outerTheme) => ({\n            ...outerTheme,\n            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n            boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n          })}\n        >\n          <DeepChild />\n        </ThemeProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n"},"StringTemplates.js":{module:"./StringTemplates.js",raw:"import * as React from 'react';\nimport { jssPreset, StylesProvider, makeStyles } from '@mui/styles';\nimport { create } from 'jss';\nimport jssTemplate from 'jss-plugin-template';\n\nconst jss = create({\n  plugins: [jssTemplate(), ...jssPreset().plugins],\n});\n\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n\nfunction Child() {\n  const classes = useStyles();\n  return (\n    <button type=\"button\" className={classes.root}>\n      String templates\n    </button>\n  );\n}\n\nfunction StringTemplates() {\n  return (\n    <StylesProvider jss={jss}>\n      <Child />\n    </StylesProvider>\n  );\n}\n\nexport default StringTemplates;\n"},"GlobalCss.js":{module:"./GlobalCss.js",raw:"import * as React from 'react';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.cssjss-advanced-global-root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '.cssjss-advanced-global-child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function GlobalCss() {\n  useStyles();\n\n  return (\n    <div className=\"cssjss-advanced-global-root\">\n      <div className=\"cssjss-advanced-global-child\" />\n    </div>\n  );\n}\n",jsxPreview:'<div className="cssjss-advanced-global-child" />',moduleTS:"./GlobalCss.js",rawTS:"import * as React from 'react';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.cssjss-advanced-global-root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '.cssjss-advanced-global-child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function GlobalCss() {\n  useStyles();\n\n  return (\n    <div className=\"cssjss-advanced-global-root\">\n      <div className=\"cssjss-advanced-global-child\" />\n    </div>\n  );\n}\n"},"HybridGlobalCss.js":{module:"./HybridGlobalCss.js",raw:"import * as React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    '&.root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '& .child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function HybridGlobalCss() {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, 'root')}>\n      <div className=\"child\" />\n    </div>\n  );\n}\n",jsxPreview:'<div className="child" />',moduleTS:"./HybridGlobalCss.js",rawTS:"import * as React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    '&.root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '& .child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function HybridGlobalCss() {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, 'root')}>\n      <div className=\"child\" />\n    </div>\n  );\n}\n"}};U.scope={process:{},import:{react:y,"@mui/styles":b,"prop-types":v,jss:C,"jss-plugin-template":d,clsx:M}};var W={"./Theming.js":function(){return t||(t=(0,N.jsx)(P.Z,{theme:D,children:(0,N.jsx)(R,{})}))},"./UseTheme.js":function(){return(0,N.jsx)(P.Z,{theme:{spacing:"8px"},children:e||(e=(0,N.jsx)(B,{}))})},"./WithTheme.js":function(){return(0,N.jsx)(P.Z,{theme:{spacing:"8px"},children:o||(o=(0,N.jsx)(F,{}))})},"./ThemeNesting.js":function(){return(0,N.jsx)("div",{children:(0,N.jsxs)(P.Z,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"},children:[p||(p=(0,N.jsx)(A,{})),c||(c=(0,N.jsx)("br",{})),l||(l=(0,N.jsx)("br",{})),(0,N.jsx)(P.Z,{theme:function(n){return(0,m.Z)((0,m.Z)({},n),{},{background:"linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",boxShadow:"0 3px 5px 2px rgba(33, 203, 243, .3)"})},children:i||(i=(0,N.jsx)(A,{}))})]})})},"./StringTemplates.js":function(){return u||(u=(0,N.jsx)(E.ZP,{jss:G,children:(0,N.jsx)(q,{})}))},"./GlobalCss.js":function(){return z(),r||(r=(0,N.jsx)("div",{className:"cssjss-advanced-global-root",children:(0,N.jsx)("div",{className:"cssjss-advanced-global-child"})}))},"./HybridGlobalCss.js":function(){var n=L();return(0,N.jsx)("div",{className:(0,M.default)(n.root,"root"),children:k||(k=(0,N.jsx)("div",{className:"child"}))})}},Y={};function J(){return(0,N.jsx)(f.Z,(0,m.Z)({},h))}},217974:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/system/styles/advanced",function(){return a(128064)}])}},function(n){n.O(0,[49774,9535,73976,97146,59727,85925,17376,41373,15686,34800,56831,22274,89068,48003,45678,31082,39987,71427,75794,53301,66215,37654,11423,42378,20759,16067,40332,97683,51733,92888,40179],function(){return n(n.s=217974)}),_N_E=n.O()}]);