(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[10960,39519],{333897:function(n,s,a){var t=a(915012),e=/^\s+/;n.exports=function(n){return n?n.slice(0,t(n)+1).replace(e,""):n}},915012:function(n){var s=/\s/;n.exports=function(n){for(var a=n.length;a--&&s.test(n.charAt(a)););return a}},889678:function(n,s,a){var t=a(706627),e=a(885365),o=a(67948),p=Math.max,c=Math.min;n.exports=function(n,s,a){var l,i,r,u,k,d,h=0,m=!1,g=!1,y=!0;if("function"!=typeof n)throw TypeError("Expected a function");function f(s){var a=l,t=i;return l=i=void 0,h=s,u=n.apply(t,a)}function v(n){var a=n-d,t=n-h;return void 0===d||a>=s||a<0||g&&t>=r}function b(){var n,a,t,o=e();if(v(o))return w(o);k=setTimeout(b,(n=o-d,a=o-h,t=s-n,g?c(t,r-a):t))}function w(n){return(k=void 0,y&&l)?f(n):(l=i=void 0,u)}function x(){var n,a=e(),t=v(a);if(l=arguments,i=this,d=a,t){if(void 0===k)return h=n=d,k=setTimeout(b,s),m?f(n):u;if(g)return clearTimeout(k),k=setTimeout(b,s),f(d)}return void 0===k&&(k=setTimeout(b,s)),u}return s=o(s)||0,t(a)&&(m=!!a.leading,r=(g="maxWait"in a)?p(o(a.maxWait)||0,s):r,y="trailing"in a?!!a.trailing:y),x.cancel=function(){void 0!==k&&clearTimeout(k),h=0,l=d=i=k=void 0},x.flush=function(){return void 0===k?u:w(e())},x}},706627:function(n){n.exports=function(n){var s=typeof n;return null!=n&&("object"==s||"function"==s)}},885365:function(n,s,a){var t=a(573401);n.exports=function(){return t.Date.now()}},123763:function(n,s,a){var t=a(889678),e=a(706627);n.exports=function(n,s,a){var o=!0,p=!0;if("function"!=typeof n)throw TypeError("Expected a function");return e(a)&&(o="leading"in a?!!a.leading:o,p="trailing"in a?!!a.trailing:p),t(n,s,{leading:o,maxWait:s,trailing:p})}},67948:function(n,s,a){var t=a(333897),e=a(706627),o=a(42848),p=0/0,c=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,i=/^0o[0-7]+$/i,r=parseInt;n.exports=function(n){if("number"==typeof n)return n;if(o(n))return p;if(e(n)){var s="function"==typeof n.valueOf?n.valueOf():n;n=e(s)?s+"":s}if("string"!=typeof n)return 0===n?n:+n;n=t(n);var a=l.test(n);return a||i.test(n)?r(n.slice(2),a?2:8):c.test(n)?p:+n}},991425:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return u}});var t={};a.r(t),a.d(t,{demoComponents:function(){return l},demos:function(){return c},docs:function(){return p},srcComponents:function(){return i}});var e=a(778521);a(470079);var o=a(652755),p={en:{description:"The API reference for @mui/styles.",location:"/docs/data/styles/api/api.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="error-icon" viewBox="0 0 20 20">\n      <path fill-rule="evenodd" d="M2 7.4v5.2a2 2 0 0 0 .586 1.414l3.4 3.4A2 2 0 0 0 7.4 18h5.2a2 2 0 0 0 1.414-.586l3.4-3.4A2 2 0 0 0 18 12.6V7.4a2 2 0 0 0-.586-1.414l-3.4-3.4A2 2 0 0 0 12.6 2H7.4a2 2 0 0 0-1.414.586l-3.4 3.4A2 2 0 0 0 2 7.4Zm11.03-.43a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="warning-icon" viewBox="0 0 20 20">\n      <path d="M2.33 17a.735.735 0 0 1-.665-.375.631.631 0 0 1-.094-.375.898.898 0 0 1 .115-.396L9.353 3.062a.621.621 0 0 1 .281-.27.85.85 0 0 1 .729 0 .622.622 0 0 1 .281.27l7.667 12.792c.07.125.108.257.114.396a.63.63 0 0 1-.093.375.842.842 0 0 1-.271.27.728.728 0 0 1-.394.105H2.33Zm7.664-2.5c.211 0 .39-.072.536-.214a.714.714 0 0 0 .218-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.531-.22.736.736 0 0 0-.536.215.714.714 0 0 0-.219.531c0 .212.072.39.215.536.143.146.32.219.531.219Zm0-2.5c.211 0 .39-.072.536-.216a.72.72 0 0 0 .218-.534v-2.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.531-.216.734.734 0 0 0-.536.216.72.72 0 0 0-.219.534v2.5c0 .212.072.39.215.534a.72.72 0 0 0 .531.216Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="success-icon" viewBox="0 0 20 20">\n      <path d="m8.938 10.875-1.25-1.23a.718.718 0 0 0-.521-.228.718.718 0 0 0-.521.229.73.73 0 0 0 0 1.062l1.77 1.771c.153.153.327.23.521.23a.718.718 0 0 0 .521-.23l3.896-3.896a.73.73 0 0 0 0-1.062.718.718 0 0 0-.52-.23.718.718 0 0 0-.521.23l-3.376 3.354ZM10 18a7.796 7.796 0 0 1-3.104-.625 8.065 8.065 0 0 1-2.552-1.719 8.064 8.064 0 0 1-1.719-2.552A7.797 7.797 0 0 1 2 10c0-1.111.208-2.15.625-3.115a8.064 8.064 0 0 1 4.27-4.26A7.797 7.797 0 0 1 10 2c1.111 0 2.15.208 3.115.625a8.096 8.096 0 0 1 4.26 4.26C17.792 7.851 18 8.89 18 10a7.797 7.797 0 0 1-.625 3.104 8.066 8.066 0 0 1-4.26 4.271A7.774 7.774 0 0 1 10 18Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="info-icon" viewBox="0 0 20 20">\n      <path d="M9.996 14c.21 0 .39-.072.535-.216a.72.72 0 0 0 .219-.534v-3.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.532-.216.734.734 0 0 0-.535.216.72.72 0 0 0-.219.534v3.5c0 .213.071.39.214.534a.72.72 0 0 0 .532.216Zm0-6.5c.21 0 .39-.071.535-.214a.714.714 0 0 0 .219-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.532-.219.736.736 0 0 0-.535.214.714.714 0 0 0-.219.532c0 .21.071.39.214.535.143.146.32.219.532.219Zm.01 10.5a7.81 7.81 0 0 1-3.11-.625 8.065 8.065 0 0 1-2.552-1.719 8.066 8.066 0 0 1-1.719-2.551A7.818 7.818 0 0 1 2 9.99c0-1.104.208-2.14.625-3.105a8.066 8.066 0 0 1 4.27-4.26A7.818 7.818 0 0 1 10.009 2a7.75 7.75 0 0 1 3.106.625 8.083 8.083 0 0 1 4.26 4.265A7.77 7.77 0 0 1 18 9.994a7.81 7.81 0 0 1-.625 3.11 8.066 8.066 0 0 1-1.719 2.552 8.083 8.083 0 0 1-2.546 1.719 7.77 7.77 0 0 1-3.104.625Z"/>\n      </symbol>\n      </svg>','\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n        <symbol id="anchor-link-icon" viewBox="0 0 12 6">\n          <path d="M8.9176 0.083252H7.1676C6.84677 0.083252 6.58427 0.345752 6.58427 0.666585C6.58427 0.987419 6.84677 1.24992 7.1676 1.24992H8.9176C9.8801 1.24992 10.6676 2.03742 10.6676 2.99992C10.6676 3.96242 9.8801 4.74992 8.9176 4.74992H7.1676C6.84677 4.74992 6.58427 5.01242 6.58427 5.33325C6.58427 5.65409 6.84677 5.91659 7.1676 5.91659H8.9176C10.5276 5.91659 11.8343 4.60992 11.8343 2.99992C11.8343 1.38992 10.5276 0.083252 8.9176 0.083252ZM3.6676 2.99992C3.6676 3.32075 3.9301 3.58325 4.25094 3.58325H7.75094C8.07177 3.58325 8.33427 3.32075 8.33427 2.99992C8.33427 2.67909 8.07177 2.41659 7.75094 2.41659H4.25094C3.9301 2.41659 3.6676 2.67909 3.6676 2.99992ZM4.83427 4.74992H3.08427C2.12177 4.74992 1.33427 3.96242 1.33427 2.99992C1.33427 2.03742 2.12177 1.24992 3.08427 1.24992H4.83427C5.1551 1.24992 5.4176 0.987419 5.4176 0.666585C5.4176 0.345752 5.1551 0.083252 4.83427 0.083252H3.08427C1.47427 0.083252 0.167603 1.38992 0.167603 2.99992C0.167603 4.60992 1.47427 5.91659 3.08427 5.91659H4.83427C5.1551 5.91659 5.4176 5.65409 5.4176 5.33325C5.4176 5.01242 5.1551 4.74992 4.83427 4.74992Z" />\n        </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n      <path d="M22.8481 4C22.8481 2.9 21.9481 2 20.8481 2H4.84814C3.74814 2 2.84814 2.9 2.84814 4V16C2.84814 17.1 3.74814 18 4.84814 18H18.8481L22.8481 22V4ZM16.8481 11H13.8481V14C13.8481 14.55 13.3981 15 12.8481 15C12.2981 15 11.8481 14.55 11.8481 14V11H8.84814C8.29814 11 7.84814 10.55 7.84814 10C7.84814 9.45 8.29814 9 8.84814 9H11.8481V6C11.8481 5.45 12.2981 5 12.8481 5C13.3981 5 13.8481 5.45 13.8481 6V9H16.8481C17.3981 9 17.8481 9.45 17.8481 10C17.8481 10.55 17.3981 11 16.8481 11Z" />\n      </symbol>\n      </svg>','<h1>API (LEGACY)</h1><p class="description">The API reference for @mui/styles.</p>\n\n<aside class="MuiCallout-root MuiCallout-error">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#error-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p><code>@mui/styles</code> was deprecated with the release of MUI\xa0Core v5 in late 2021.\nIt depended on <a href="https://cssinjs.org/">JSS</a> as a styling solution, which is no longer used in <code>@mui/material</code>.</p>\n<p><code>@mui/styles</code> is not compatible with <a href="https://react.dev/reference/react/StrictMode">React.StrictMode</a> or React 18, and it will not be updated.</p>\n<p>This documentation remains here for those working on legacy projects, but we <strong>strongly discourage</strong> you from using <code>@mui/styles</code> when creating a new app with Material\xa0UI—you <em>will</em> face unresolvable dependency issues.</p>\n<p>Please use <a href="/system/getting-started/"><code>@mui/system</code></a> instead.</p>\n\n</div></aside><h2 id="creategenerateclassname-options-class-name-generator"><a href="#creategenerateclassname-options-class-name-generator" class="title-link-to-anchor"><code>createGenerateClassName([options]) =&gt; class name generator</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="creategenerateclassname-options-class-name-generator"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>A function which returns <a href="https://cssinjs.org/jss-api/#generate-your-class-names">a class name generator function</a>.</p>\n<h3 id="arguments"><a href="#arguments" class="title-link-to-anchor">Arguments<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="arguments"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><ol>\n<li><p><code>options</code> (<em>object</em> [optional]):</p>\n<ul>\n<li><code>options.disableGlobal</code> (<em>bool</em> [optional]): Defaults to <code>false</code>. Disable the generation of deterministic class names.</li>\n<li><code>options.productionPrefix</code> (<em>string</em> [optional]): Defaults to <code>&#39;jss&#39;</code>. The string used to prefix the class names in production.</li>\n<li><code>options.seed</code> (<em>string</em> [optional]): Defaults to <code>&#39;&#39;</code>. The string used to uniquely identify the generator. It can be used to avoid class name collisions when using multiple generators in the same document.</li>\n</ul>\n</li>\n</ol>\n<h3 id="returns"><a href="#returns" class="title-link-to-anchor">Returns<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="returns"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><code>class name generator</code>: The generator should be provided to JSS.</p>\n<h3 id="examples"><a href="#examples" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StylesProvider<span class="token punctuation">,</span> createGenerateClassName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> generateClassName <span class="token operator">=</span> <span class="token function">createGenerateClassName</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">productionPrefix</span><span class="token operator">:</span> <span class="token string">\'c\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StylesProvider</span></span> <span class="token attr-name">generateClassName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>generateClassName<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StylesProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="createstyles-styles-styles"><a href="#createstyles-styles-styles" class="title-link-to-anchor"><code>createStyles(styles) =&gt; styles</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="createstyles-styles-styles"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>This function doesn&#39;t really &quot;do anything&quot; at runtime, it&#39;s just the identity\nfunction. Its only purpose is to defeat <strong>TypeScript</strong>&#39;s type widening when providing\nstyle rules to <code>makeStyles</code>/<code>withStyles</code> which are a function of the <code>Theme</code>.</p>\n<h3 id="arguments-2"><a href="#arguments-2" class="title-link-to-anchor">Arguments<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="arguments-2"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><ol>\n<li><code>styles</code> (<em>object</em>): A styles object.</li>\n</ol>\n<h3 id="returns-2"><a href="#returns-2" class="title-link-to-anchor">Returns<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="returns-2"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><code>styles</code>: A styles object.</p>\n<h3 id="examples-2"><a href="#examples-2" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples-2"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStyles<span class="token punctuation">,</span> makeStyles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme<span class="token punctuation">,</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">makeStyles</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">theme</span><span class="token operator">:</span> Theme</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="makestyles-styles-options-hook"><a href="#makestyles-styles-options-hook" class="title-link-to-anchor"><code>makeStyles(styles, [options]) =&gt; hook</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="makestyles-styles-options-hook"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Link a style sheet with a function component using the <strong>hook</strong> pattern.</p>\n<h3 id="arguments-3"><a href="#arguments-3" class="title-link-to-anchor">Arguments<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="arguments-3"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><ol>\n<li><code>styles</code> (<em>Function | Object</em>): A function generating the styles or a styles object.\nIt will be linked to the component.\nUse the function signature if you need to have access to the theme. It&#39;s provided as the first argument.</li>\n<li><code>options</code> (<em>object</em> [optional]):</li>\n</ol>\n<ul>\n<li><code>options.defaultTheme</code> (<em>object</em> [optional]): The default theme to use if a theme isn&#39;t supplied through a Theme Provider.</li>\n<li><code>options.name</code> (<em>string</em> [optional]): The name of the style sheet. Useful for debugging.</li>\n<li><code>options.flip</code> (<em>bool</em> [optional]): When set to <code>false</code>, this sheet will opt-out the <code>rtl</code> transformation. When set to <code>true</code>, the styles are inversed. When set to <code>null</code>, it follows <code>theme.direction</code>.</li>\n<li>The other keys are forwarded to the options argument of <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a>.</li>\n</ul>\n<h3 id="returns-3"><a href="#returns-3" class="title-link-to-anchor">Returns<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="returns-3"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><code>hook</code>: A hook. This hook can be used in a function component. The documentation often calls this returned hook <code>useStyles</code>.\nIt accepts one argument: the props that will be used for &quot;interpolation&quot; in\nthe style sheet.</p>\n<h3 id="examples-3"><a href="#examples-3" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples-3"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> makeStyles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">makeStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">color</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>color<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="serverstylesheets"><a href="#serverstylesheets" class="title-link-to-anchor"><code>ServerStyleSheets</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="serverstylesheets"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>This is a class helper to handle server-side rendering. <a href="/material-ui/guides/server-rendering/">You can follow this guide for a practical approach</a>.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerStyleSheets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> sheets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerStyleSheets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>sheets<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cssString <span class="token operator">=</span> sheets<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n&lt;!DOCTYPE html>\n&lt;html>\n  &lt;head>\n    &lt;style id="jss-server-side"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cssString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/style>\n  &lt;/head>\n  &lt;body></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/body>\n&lt;/html>\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="new-serverstylesheets-options"><a href="#new-serverstylesheets-options" class="title-link-to-anchor"><code>new ServerStyleSheets([options])</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="new-serverstylesheets-options"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The instantiation accepts an options object as a first argument.</p>\n<ol>\n<li><code>options</code> (<em>object</em> [optional]): The options are spread as props to the <a href="#stylesprovider"><code>StylesProvider</code></a> component.</li>\n</ol>\n<h3 id="sheets-collect-node-react-element"><a href="#sheets-collect-node-react-element" class="title-link-to-anchor"><code>sheets.collect(node) =&gt; React element</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="sheets-collect-node-react-element"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The method wraps your React node in a provider element.\nIt collects the style sheets during the rendering so they can be later sent to the client.</p>\n<h3 id="sheets-tostring-css-string"><a href="#sheets-tostring-css-string" class="title-link-to-anchor"><code>sheets.toString() =&gt; CSS string</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="sheets-tostring-css-string"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The method returns the collected styles.</p>\n<p>⚠️ You must call <code>.collect()</code> before using this method.</p>\n<h3 id="sheets-getstyleelement-css-react-element"><a href="#sheets-getstyleelement-css-react-element" class="title-link-to-anchor"><code>sheets.getStyleElement() =&gt; CSS React element</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="sheets-getstyleelement-css-react-element"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The method is an alternative to <code>.toString()</code> when you are rendering the whole page with React.</p>\n<p>⚠️ You must call <code>.collect()</code> before using this method.</p>\n<h2 id="styled-component-styles-options-component"><a href="#styled-component-styles-options-component" class="title-link-to-anchor"><code>styled(Component)(styles, [options]) =&gt; Component</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="styled-component-styles-options-component"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Link a style sheet with a function component using the <strong>styled components</strong> pattern.</p>\n<h3 id="arguments-4"><a href="#arguments-4" class="title-link-to-anchor">Arguments<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="arguments-4"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><ol>\n<li><code>Component</code>: The component that will be wrapped.</li>\n<li><code>styles</code> (<em>Function | Object</em>): A function generating the styles or a styles object.\nIt will be linked to the component.\nUse the function signature if you need to have access to the theme. It&#39;s provided as property of the first argument.</li>\n<li><code>options</code> (<em>object</em> [optional]):</li>\n</ol>\n<ul>\n<li><code>options.defaultTheme</code> (<em>object</em> [optional]): The default theme to use if a theme isn&#39;t supplied through a Theme Provider.</li>\n<li><code>options.withTheme</code> (<em>bool</em> [optional]): Defaults to <code>false</code>. Provide the <code>theme</code> object to the component as a prop.</li>\n<li><code>options.name</code> (<em>string</em> [optional]): The name of the style sheet. Useful for debugging.\nIf the value isn&#39;t provided, it will try to fallback to the name of the component.</li>\n<li><code>options.flip</code> (<em>bool</em> [optional]): When set to <code>false</code>, this sheet will opt-out the <code>rtl</code> transformation. When set to <code>true</code>, the styles are inversed. When set to <code>null</code>, it follows <code>theme.direction</code>.</li>\n<li>The other keys are forwarded to the options argument of <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a>.</li>\n</ul>\n<h3 id="returns-4"><a href="#returns-4" class="title-link-to-anchor">Returns<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="returns-4"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><code>Component</code>: The new component created.</p>\n<h3 id="examples-4"><a href="#examples-4" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples-4"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> styled<span class="token punctuation">,</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> MyThemeComponent <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">padding</span><span class="token operator">:</span> theme<span class="token punctuation">.</span><span class="token function">spacing</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">StyledComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyThemeComponent</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyThemeComponent</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="stylesprovider"><a href="#stylesprovider" class="title-link-to-anchor"><code>StylesProvider</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="stylesprovider"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>This component allows you to change the behavior of the styling solution. It makes the options available down the React tree thanks to the context.</p>\n<p>It should preferably be used at <strong>the root of your component tree</strong>.</p>\n<h3 id="props"><a href="#props" class="title-link-to-anchor">Props<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="props"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">children&nbsp;*</td>\n<td align="left">node</td>\n<td align="left"></td>\n<td align="left">Your component tree.</td>\n</tr>\n<tr>\n<td align="left">disableGeneration</td>\n<td align="left">bool</td>\n<td align="left">false</td>\n<td align="left">You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let&#39;s say you are using react-apollo to extract all the queries made by the interface server-side. You can significantly speed up the traversal with this prop.</td>\n</tr>\n<tr>\n<td align="left">generateClassName</td>\n<td align="left">func</td>\n<td align="left"></td>\n<td align="left">JSS&#39;s class name generator.</td>\n</tr>\n<tr>\n<td align="left">injectFirst</td>\n<td align="left">bool</td>\n<td align="left">false</td>\n<td align="left">By default, the styles are injected last in the <code>&lt;head&gt;</code> element of the page. As a result, they gain more specificity than any other style sheet. If you want to override Material\xa0UI&#39;s styles, set this prop.</td>\n</tr>\n<tr>\n<td align="left">jss</td>\n<td align="left">object</td>\n<td align="left"></td>\n<td align="left">JSS&#39;s instance.</td>\n</tr>\n</tbody></table>\n<h3 id="examples-5"><a href="#examples-5" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples-5"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StylesProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StylesProvider</span></span> <span class="token attr-name">jss</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>jss<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StylesProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="themeprovider"><a href="#themeprovider" class="title-link-to-anchor"><code>ThemeProvider</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="themeprovider"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>This component takes a <code>theme</code> prop, and makes it available down the React tree thanks to the context.\nIt should preferably be used at <strong>the root of your component tree</strong>.</p>\n<h3 id="props-2"><a href="#props-2" class="title-link-to-anchor">Props<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="props-2"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">children&nbsp;*</td>\n<td align="left">node</td>\n<td align="left"></td>\n<td align="left">Your component tree.</td>\n</tr>\n<tr>\n<td align="left">theme&nbsp;*</td>\n<td align="left">union:&nbsp;object&nbsp;&#124;&nbsp;func</td>\n<td align="left"></td>\n<td align="left">A theme object. You can provide a function to extend the outer theme.</td>\n</tr>\n</tbody></table>\n<h3 id="examples-6"><a href="#examples-6" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples-6"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="usetheme-theme"><a href="#usetheme-theme" class="title-link-to-anchor"><code>useTheme() =&gt; theme</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="usetheme-theme"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>This hook returns the <code>theme</code> object so it can be used inside a function component.</p>\n<h3 id="returns-5"><a href="#returns-5" class="title-link-to-anchor">Returns<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="returns-5"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><code>theme</code>: The theme object previously injected in the context.</p>\n<h3 id="examples-7"><a href="#examples-7" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples-7"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">spacing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>theme<span class="token punctuation">.</span>spacing<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="withstyles-styles-options-higher-order-component"><a href="#withstyles-styles-options-higher-order-component" class="title-link-to-anchor"><code>withStyles(styles, [options]) =&gt; higher-order component</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="withstyles-styles-options-higher-order-component"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Link a style sheet with a component using the <strong>higher-order component</strong> pattern.\nIt does not modify the component passed to it; instead, it returns a new component with a <code>classes</code> prop.\nThis <code>classes</code> object contains the name of the class names injected in the DOM.</p>\n<p>Some implementation details that might be interesting to being aware of:</p>\n<ul>\n<li>It adds a <code>classes</code> prop so you can override the injected class names from the outside.</li>\n<li>It forwards refs to the inner component.</li>\n<li>It does <strong>not</strong> copy over statics.\nFor instance, it can be used to define a <code>getInitialProps()</code> static method (next.js).</li>\n</ul>\n<h3 id="arguments-5"><a href="#arguments-5" class="title-link-to-anchor">Arguments<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="arguments-5"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><ol>\n<li><code>styles</code> (<em>Function | Object</em>): A function generating the styles or a styles object.\nIt will be linked to the component.\nUse the function signature if you need to have access to the theme. It&#39;s provided as the first argument.</li>\n<li><code>options</code> (<em>object</em> [optional]):</li>\n</ol>\n<ul>\n<li><code>options.defaultTheme</code> (<em>object</em> [optional]): The default theme to use if a theme isn&#39;t supplied through a Theme Provider.</li>\n<li><code>options.withTheme</code> (<em>bool</em> [optional]): Defaults to <code>false</code>. Provide the <code>theme</code> object to the component as a prop.</li>\n<li><code>options.name</code> (<em>string</em> [optional]): The name of the style sheet. Useful for debugging.\nIf the value isn&#39;t provided, it will try to fallback to the name of the component.</li>\n<li><code>options.flip</code> (<em>bool</em> [optional]): When set to <code>false</code>, this sheet will opt-out the <code>rtl</code> transformation. When set to <code>true</code>, the styles are inversed. When set to <code>null</code>, it follows <code>theme.direction</code>.</li>\n<li>The other keys are forwarded to the options argument of <a href="https://cssinjs.org/jss-api/#create-style-sheet">jss.createStyleSheet([styles], [options])</a>.</li>\n</ul>\n<h3 id="returns-6"><a href="#returns-6" class="title-link-to-anchor">Returns<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="returns-6"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><code>higher-order component</code>: Should be used to wrap a component.</p>\n<h3 id="examples-8"><a href="#examples-8" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples-8"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> withStyles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withStyles</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Also, you can use as <a href="https://babeljs.io/docs/babel-plugin-proposal-decorators">decorators</a> like so:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> withStyles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n@<span class="token function">withStyles</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> MyComponent<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="withtheme-component-component"><a href="#withtheme-component-component" class="title-link-to-anchor"><code>withTheme(Component) =&gt; Component</code><span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="withtheme-component-component"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Provide the <code>theme</code> object as a prop of the input component so it can be used\nin the render method.</p>\n<h3 id="arguments-6"><a href="#arguments-6" class="title-link-to-anchor">Arguments<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="arguments-6"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><ol>\n<li><code>Component</code>: The component that will be wrapped.</li>\n</ol>\n<h3 id="returns-7"><a href="#returns-7" class="title-link-to-anchor">Returns<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="returns-7"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><code>Component</code>: The new component created. Does forward refs to the inner component.</p>\n<h3 id="examples-9"><a href="#examples-9" class="title-link-to-anchor">Examples<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="examples-9"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> withTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>direction<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withTheme</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n'],toc:[{text:"createGenerateClassName(&#8203;[options]) =&gt; class name generator",level:2,hash:"creategenerateclassname-options-class-name-generator",children:[{text:"Arguments",level:3,hash:"arguments"},{text:"Returns",level:3,hash:"returns"},{text:"Examples",level:3,hash:"examples"}]},{text:"createStyles(&#8203;styles) =&gt; styles",level:2,hash:"createstyles-styles-styles",children:[{text:"Arguments",level:3,hash:"arguments-2"},{text:"Returns",level:3,hash:"returns-2"},{text:"Examples",level:3,hash:"examples-2"}]},{text:"makeStyles(&#8203;styles, [options]) =&gt; hook",level:2,hash:"makestyles-styles-options-hook",children:[{text:"Arguments",level:3,hash:"arguments-3"},{text:"Returns",level:3,hash:"returns-3"},{text:"Examples",level:3,hash:"examples-3"}]},{text:"ServerStyleSheets",level:2,hash:"serverstylesheets",children:[{text:"new ServerStyleSheets(&#8203;[options])",level:3,hash:"new-serverstylesheets-options"},{text:"sheets.collect(&#8203;node) =&gt; React element",level:3,hash:"sheets-collect-node-react-element"},{text:"sheets.toString(&#8203;) =&gt; CSS string",level:3,hash:"sheets-tostring-css-string"},{text:"sheets.getStyleElement(&#8203;) =&gt; CSS React element",level:3,hash:"sheets-getstyleelement-css-react-element"}]},{text:"styled(&#8203;Component)(&#8203;styles, [options]) =&gt; Component",level:2,hash:"styled-component-styles-options-component",children:[{text:"Arguments",level:3,hash:"arguments-4"},{text:"Returns",level:3,hash:"returns-4"},{text:"Examples",level:3,hash:"examples-4"}]},{text:"StylesProvider",level:2,hash:"stylesprovider",children:[{text:"Props",level:3,hash:"props"},{text:"Examples",level:3,hash:"examples-5"}]},{text:"ThemeProvider",level:2,hash:"themeprovider",children:[{text:"Props",level:3,hash:"props-2"},{text:"Examples",level:3,hash:"examples-6"}]},{text:"useTheme(&#8203;) =&gt; theme",level:2,hash:"usetheme-theme",children:[{text:"Returns",level:3,hash:"returns-5"},{text:"Examples",level:3,hash:"examples-7"}]},{text:"withStyles(&#8203;styles, [options]) =&gt; higher-order component",level:2,hash:"withstyles-styles-options-higher-order-component",children:[{text:"Arguments",level:3,hash:"arguments-5"},{text:"Returns",level:3,hash:"returns-6"},{text:"Examples",level:3,hash:"examples-8"}]},{text:"withTheme(&#8203;Component) =&gt; Component",level:2,hash:"withtheme-component-component",children:[{text:"Arguments",level:3,hash:"arguments-6"},{text:"Returns",level:3,hash:"returns-7"},{text:"Examples",level:3,hash:"examples-9"}]}],title:"Styles API",headers:{title:"Styles API",components:[],hooks:[]}}},c={};c.scope={process:{},import:{}};var l={},i={},r=a(735250);function u(){return(0,r.jsx)(o.Z,(0,e.Z)({},t))}},652755:function(n,s,a){"use strict";a.d(s,{Z:function(){return b}});var t,e=a(778521),o=a(470079),p=a(639519),c=a.n(p),l=a(389136),i=a(302312),r=a(513182),u=a(597683),k=a(42141),d=a(162119),h=a(871379),m=a(775196),g=a(694366),y=a(74077),f=a(735250);function v(n){var s=n.mode,a=(0,r.tv)().setMode;return o.useEffect(function(){a(s)},[s,a]),null}function b(n){var s=(0,i.Z)(),a=(0,l.useRouter)(),p=(0,k.ln)(a.asPath).canonicalAs,c=n.disableAd,b=void 0!==c&&c,w=n.disableToc,x=n.disableCssVarsProvider,C=n.demos,T=void 0===C?{}:C,M=n.docs,S=n.demoComponents,P=n.srcComponents,j=M[(0,h.fO)()]||M.en,A=p.startsWith("/joy-ui/")&&!(void 0!==x&&x),R=A?r.lL:o.Fragment,E=A?m.BrandingProvider:o.Fragment,I=(0,e.Z)({},A&&{mode:s.palette.mode});return(0,f.jsxs)(d.Z,{cardOptions:{description:j.headers.cardDescription,title:j.headers.cardTitle},description:j.description,disableAd:b,disableToc:void 0!==w&&w,location:j.location,title:j.title,toc:j.toc,children:[b?null:t||(t=(0,f.jsx)(m.BrandingProvider,{children:(0,f.jsx)(y.Z,{children:(0,f.jsx)(g.ZP,{})})})),(0,f.jsxs)(R,{children:[A&&(0,f.jsx)(v,{mode:s.palette.mode}),j.rendered.map(function(n,a){return(0,f.jsx)(u.Z,{demoComponents:S,demos:T,disableAd:b,localizedDoc:j,renderedMarkdownOrDemo:n,srcComponents:P,theme:s,WrapperComponent:E,wrapperProps:I},"demos-section-".concat(a))})]})]})}v.propTypes={mode:c().oneOf(["light","dark"])}},735404:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/system/styles/api",function(){return a(991425)}])},884835:function(n,s,a){"use strict";var t=a(311596);function e(){}function o(){}o.resetWarningCache=e,n.exports=function(){function n(n,s,a,e,o,p){if(p!==t){var c=Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function s(){return n}n.isRequired=n;var a={array:n,bigint:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,elementType:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s,exact:s,checkPropTypes:o,resetWarningCache:e};return a.PropTypes=a,a}},639519:function(n,s,a){n.exports=a(884835)()},311596:function(n){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}},function(n){n.O(0,[49774,9535,73976,97146,59727,85925,17376,41373,15686,34800,56831,22274,89068,48003,45678,31082,39987,71427,75794,53301,66215,37654,11423,42378,20759,16067,40332,97683,92888,40179],function(){return n(n.s=735404)}),_N_E=n.O()}]);