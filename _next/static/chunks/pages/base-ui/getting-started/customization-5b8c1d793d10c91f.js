(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5425],{795274:function(n,s,t){"use strict";t.r(s),t.d(s,{default:function(){return nn}});var o,a,e,p,c,i,l,r,u,d,h,m,k={};t.r(k),t.d(k,{demoComponents:function(){return G},demos:function(){return X},docs:function(){return Y},srcComponents:function(){return Q}});var b=t(778521),w=t(470079),g=t.t(w,2),f=t(916613),y=t(853301),x=t(291766),S=t(548396),C=t(344684),v=t(950651),P=t(159727),j=t.n(P),z=t(653048),F=t(818415),M=t(226704),T=t(963625),$=t(655317),I=t(735250),B="\n  .my-switch {\n    font-size: 0;\n    position: relative;\n    display: inline-block;\n    width: 32px;\n    height: 20px;\n    background: #B3C3D3;\n    border-radius: 10px;\n    margin: 10px;\n    cursor: pointer;\n  }\n\n  .my-switch.".concat(T.h.checked," {\n    background: #007FFF;\n  }\n\n  .my-switch .").concat(T.h.thumb," {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #FFF;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  .my-switch.").concat(T.h.checked," .").concat(T.h.thumb," {\n    left: 14px;\n    top: 3px;\n    background-color: #FFF;\n  }\n\n  .my-switch .").concat(T.h.input," {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }"),H=t(564376),N=t(163226),V=(0,N.Z)($.r)(a||(a=(0,H.Z)(["\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  & ."," {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #fff;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  & ."," {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }\n\n  &."," {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &."," {\n    background: #007fff;\n\n    & ."," {\n      left: 14px;\n      top: 3px;\n      background-color: #fff;\n    }\n  }\n\n  &."," ."," {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n"])),T.h.thumb,T.h.input,T.h.disabled,T.h.checked,T.h.thumb,T.h.focusVisible,T.h.thumb),Z=(0,N.Z)("span")(p||(p=(0,H.Z)(["\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  &."," {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &."," {\n    background: #007fff;\n  }\n"])),T.h.disabled,T.h.checked),R=(0,N.Z)("span")(c||(c=(0,H.Z)(["\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  ."," & {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n\n  ."," > & {\n    left: 14px;\n    top: 3px;\n    background-color: #fff;\n  }\n"])),T.h.focusVisible,T.h.checked),D=(0,N.Z)("input")(i||(i=(0,H.Z)(["\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n"]))),L=t(198108),O=t(252951),U=(0,L.B)(j()),A=t(994014),q=(0,N.Z)("span")(r||(r=(0,H.Z)(["\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  &.Switch-disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.Switch-checked {\n    background: #007fff;\n  }\n"]))),_=(0,N.Z)("input")(u||(u=(0,H.Z)(["\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n"]))),E=(0,N.Z)("span")(d||(d=(0,H.Z)(["\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  &.Switch-focusVisible {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n\n  &.Switch-checked {\n    left: 14px;\n    top: 3px;\n    background-color: #fff;\n  }\n"])));function K(n){var s=(0,A.h)(n),t=s.getInputProps,o=s.checked,a=s.disabled,e=s.focusVisible,p=(0,z.default)(o&&"Switch-checked",a&&"Switch-disabled",e&&"Switch-focusVisible");return(0,I.jsxs)(q,{className:(0,z.default)(p),children:[(0,I.jsx)(E,{className:(0,z.default)(p)}),(0,I.jsx)(_,(0,b.Z)((0,b.Z)({},t()),{},{"aria-label":n["aria-label"]}))]})}var W=t(851692),J={root:(0,N.Z)("span")(function(n){var s=n.ownerState;return"\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  ".concat(s.disabled?"opacity: 0.4;\n         cursor: not-allowed;":"","\n\n  ").concat(s.checked?"background: #007fff;":"","\n")}),thumb:(0,N.Z)("span")(function(n){var s=n.ownerState;return"\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  ".concat(s.focusVisible?"background-color: rgba(255, 255, 255, 1);\n         box-shadow: 0 0 1px 8px rgba(0, 0, 0, 0.25);":"","\n\n  ").concat(s.checked?"left: 14px;\n         top: 3px;\n         background-color: #fff;":"","\n")}),input:(0,N.Z)("input")(m||(m=(0,H.Z)(["\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n"])))},Y={en:{description:"There are several ways to customize Base\xa0UI components, from applying custom CSS rules to building fully custom components using hooks.",location:"/docs/data/base/getting-started/customization/customization.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="error-icon" viewBox="0 0 20 20">\n      <path fill-rule="evenodd" d="M2 7.4v5.2a2 2 0 0 0 .586 1.414l3.4 3.4A2 2 0 0 0 7.4 18h5.2a2 2 0 0 0 1.414-.586l3.4-3.4A2 2 0 0 0 18 12.6V7.4a2 2 0 0 0-.586-1.414l-3.4-3.4A2 2 0 0 0 12.6 2H7.4a2 2 0 0 0-1.414.586l-3.4 3.4A2 2 0 0 0 2 7.4Zm11.03-.43a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="warning-icon" viewBox="0 0 20 20">\n      <path d="M2.33 17a.735.735 0 0 1-.665-.375.631.631 0 0 1-.094-.375.898.898 0 0 1 .115-.396L9.353 3.062a.621.621 0 0 1 .281-.27.85.85 0 0 1 .729 0 .622.622 0 0 1 .281.27l7.667 12.792c.07.125.108.257.114.396a.63.63 0 0 1-.093.375.842.842 0 0 1-.271.27.728.728 0 0 1-.394.105H2.33Zm7.664-2.5c.211 0 .39-.072.536-.214a.714.714 0 0 0 .218-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.531-.22.736.736 0 0 0-.536.215.714.714 0 0 0-.219.531c0 .212.072.39.215.536.143.146.32.219.531.219Zm0-2.5c.211 0 .39-.072.536-.216a.72.72 0 0 0 .218-.534v-2.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.531-.216.734.734 0 0 0-.536.216.72.72 0 0 0-.219.534v2.5c0 .212.072.39.215.534a.72.72 0 0 0 .531.216Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="success-icon" viewBox="0 0 20 20">\n      <path d="m8.938 10.875-1.25-1.23a.718.718 0 0 0-.521-.228.718.718 0 0 0-.521.229.73.73 0 0 0 0 1.062l1.77 1.771c.153.153.327.23.521.23a.718.718 0 0 0 .521-.23l3.896-3.896a.73.73 0 0 0 0-1.062.718.718 0 0 0-.52-.23.718.718 0 0 0-.521.23l-3.376 3.354ZM10 18a7.796 7.796 0 0 1-3.104-.625 8.065 8.065 0 0 1-2.552-1.719 8.064 8.064 0 0 1-1.719-2.552A7.797 7.797 0 0 1 2 10c0-1.111.208-2.15.625-3.115a8.064 8.064 0 0 1 4.27-4.26A7.797 7.797 0 0 1 10 2c1.111 0 2.15.208 3.115.625a8.096 8.096 0 0 1 4.26 4.26C17.792 7.851 18 8.89 18 10a7.797 7.797 0 0 1-.625 3.104 8.066 8.066 0 0 1-4.26 4.271A7.774 7.774 0 0 1 10 18Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="info-icon" viewBox="0 0 20 20">\n      <path d="M9.996 14c.21 0 .39-.072.535-.216a.72.72 0 0 0 .219-.534v-3.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.532-.216.734.734 0 0 0-.535.216.72.72 0 0 0-.219.534v3.5c0 .213.071.39.214.534a.72.72 0 0 0 .532.216Zm0-6.5c.21 0 .39-.071.535-.214a.714.714 0 0 0 .219-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.532-.219.736.736 0 0 0-.535.214.714.714 0 0 0-.219.532c0 .21.071.39.214.535.143.146.32.219.532.219Zm.01 10.5a7.81 7.81 0 0 1-3.11-.625 8.065 8.065 0 0 1-2.552-1.719 8.066 8.066 0 0 1-1.719-2.551A7.818 7.818 0 0 1 2 9.99c0-1.104.208-2.14.625-3.105a8.066 8.066 0 0 1 4.27-4.26A7.818 7.818 0 0 1 10.009 2a7.75 7.75 0 0 1 3.106.625 8.083 8.083 0 0 1 4.26 4.265A7.77 7.77 0 0 1 18 9.994a7.81 7.81 0 0 1-.625 3.11 8.066 8.066 0 0 1-1.719 2.552 8.083 8.083 0 0 1-2.546 1.719 7.77 7.77 0 0 1-3.104.625Z"/>\n      </symbol>\n      </svg>','\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n        <symbol id="anchor-link-icon" viewBox="0 0 12 6">\n          <path d="M8.9176 0.083252H7.1676C6.84677 0.083252 6.58427 0.345752 6.58427 0.666585C6.58427 0.987419 6.84677 1.24992 7.1676 1.24992H8.9176C9.8801 1.24992 10.6676 2.03742 10.6676 2.99992C10.6676 3.96242 9.8801 4.74992 8.9176 4.74992H7.1676C6.84677 4.74992 6.58427 5.01242 6.58427 5.33325C6.58427 5.65409 6.84677 5.91659 7.1676 5.91659H8.9176C10.5276 5.91659 11.8343 4.60992 11.8343 2.99992C11.8343 1.38992 10.5276 0.083252 8.9176 0.083252ZM3.6676 2.99992C3.6676 3.32075 3.9301 3.58325 4.25094 3.58325H7.75094C8.07177 3.58325 8.33427 3.32075 8.33427 2.99992C8.33427 2.67909 8.07177 2.41659 7.75094 2.41659H4.25094C3.9301 2.41659 3.6676 2.67909 3.6676 2.99992ZM4.83427 4.74992H3.08427C2.12177 4.74992 1.33427 3.96242 1.33427 2.99992C1.33427 2.03742 2.12177 1.24992 3.08427 1.24992H4.83427C5.1551 1.24992 5.4176 0.987419 5.4176 0.666585C5.4176 0.345752 5.1551 0.083252 4.83427 0.083252H3.08427C1.47427 0.083252 0.167603 1.38992 0.167603 2.99992C0.167603 4.60992 1.47427 5.91659 3.08427 5.91659H4.83427C5.1551 5.91659 5.4176 5.65409 5.4176 5.33325C5.4176 5.01242 5.1551 4.74992 4.83427 4.74992Z" />\n        </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n      <path d="M22.8481 4C22.8481 2.9 21.9481 2 20.8481 2H4.84814C3.74814 2 2.84814 2.9 2.84814 4V16C2.84814 17.1 3.74814 18 4.84814 18H18.8481L22.8481 22V4ZM16.8481 11H13.8481V14C13.8481 14.55 13.3981 15 12.8481 15C12.2981 15 11.8481 14.55 11.8481 14V11H8.84814C8.29814 11 7.84814 10.55 7.84814 10C7.84814 9.45 8.29814 9 8.84814 9H11.8481V6C11.8481 5.45 12.2981 5 12.8481 5C13.3981 5 13.8481 5.45 13.8481 6V9H16.8481C17.3981 9 17.8481 9.45 17.8481 10C17.8481 10.55 17.3981 11 16.8481 11Z" />\n      </symbol>\n      </svg>','<h1>Customizing Base\xa0UI components</h1><p class="description">There are several ways to customize Base\xa0UI components, from applying custom CSS rules to building fully custom components using hooks.</p>\n\n<p>With Base\xa0UI, you have the freedom to decide how much you want to customize a component&#39;s structure and style.</p>\n<h2 id="styling-the-components"><a href="#styling-the-components" class="title-link-to-anchor">Styling the components<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="styling-the-components"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>This section reviews several methods of customization that are available: applying custom CSS rules, overriding default subcomponent slots, customizing the slot props, and using hooks to build fully custom components.</p>\n<h3 id="which-option-to-choose"><a href="#which-option-to-choose" class="title-link-to-anchor">Which option to choose?<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="which-option-to-choose"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The multitude of options can be overwhelming, especially if you&#39;re new to Base\xa0UI.\nHow to decide which one to use, then?</p>\n<p>The first decision to make is whether to use unstyled components or hooks.\nHooks are better suited for making component libraries that can be further customized.\nFor example, our own Joy\xa0UI is implemented using hooks from Base\xa0UI.\nHooks also serve as the basis for several Material\xa0UI components, and future versions of the library will use them even more extensively.</p>\n<p>If you don&#39;t need to make your component library customizable (for instance, by exposing <code>slotProps</code>), then the unstyled components may be a better option thanks to their simplicity.</p>\n<p>After choosing unstyled components, there is one more decision to make: how to style them.\nThe answer depends on the styling solution used in the project:</p>\n<h4>Plain CSS, Sass, Less</h4><p>...or anything else that compiles to CSS:</p>\n<p>You can either <a href="#applying-custom-css-rules">style the components using the built-in classes</a> or <a href="#customizing-slot-props">specify your own classes</a> and reference them in your stylesheets.</p>\n<h4>CSS\xa0Modules</h4><p>When working with <a href="https://github.com/css-modules/css-modules">CSS\xa0Modules</a>, the simplest approach is to <a href="#customizing-slot-props">specify custom classes using <code>slotProps</code></a>, as shown below:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> clsx <span class="token keyword">from</span> <span class="token string">\'clsx\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Switch <span class="token keyword">as</span> BaseSwitch<span class="token punctuation">,</span> SwitchOwnerState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/base/Switch\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> classes <span class="token keyword">from</span> <span class="token string">\'./styles.module.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Switch</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> slotProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">root</span><span class="token operator">:</span> <span class="token punctuation">(</span>ownerState<span class="token operator">:</span> SwitchOwnerState<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      className<span class="token operator">:</span> <span class="token function">clsx</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>classes<span class="token punctuation">.</span>checked<span class="token punctuation">]</span><span class="token operator">:</span> ownerState<span class="token punctuation">.</span>checked<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>classes<span class="token punctuation">.</span>disabled<span class="token punctuation">]</span><span class="token operator">:</span> ownerState<span class="token punctuation">.</span>disabled<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    thumb<span class="token operator">:</span> <span class="token punctuation">{</span> className<span class="token operator">:</span> classes<span class="token punctuation">.</span>thumb <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    track<span class="token operator">:</span> <span class="token punctuation">{</span> className<span class="token operator">:</span> classes<span class="token punctuation">.</span>track <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    input<span class="token operator">:</span> <span class="token punctuation">{</span> className<span class="token operator">:</span> classes<span class="token punctuation">.</span>input <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BaseSwitch</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">slotProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>slotProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>In this example we&#39;re using the <a href="https://www.npmjs.com/package/clsx">clsx</a> utility to reduce the effort needed to apply class names conditionally.</p>\n<h4>Tailwind\xa0CSS</h4><p>Use <a href="#customizing-slot-props"><code>slotProps</code></a> to apply custom styles using <a href="https://tailwindcss.com/" target="_blank" rel="noopener nofollow">Tailwind\xa0CSS</a>, as shown below:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Switch <span class="token keyword">as</span> BaseSwitch<span class="token punctuation">,</span> SwitchOwnerState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/base/Switch\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Switch</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> slotProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">root</span><span class="token operator">:</span> <span class="token punctuation">(</span>ownerState<span class="token operator">:</span> SwitchOwnerState<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      className<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">inline-block w-8 h-5 rounded-full cursor-pointer relative </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        ownerState<span class="token punctuation">.</span>checked <span class="token operator">?</span> <span class="token string">\'bg-cyan-500\'</span> <span class="token operator">:</span> <span class="token string">\'bg-zinc-400\'</span>\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">thumb</span><span class="token operator">:</span> <span class="token punctuation">(</span>ownerState<span class="token operator">:</span> SwitchOwnerState<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      className<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-white block w-3.5 h-3.5 rounded-full relative top-[3px] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        ownerState<span class="token punctuation">.</span>checked <span class="token operator">?</span> <span class="token string">\'left-[3px]\'</span> <span class="token operator">:</span> <span class="token string">\'left-[14px]\'</span>\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    input<span class="token operator">:</span> <span class="token punctuation">{</span> className<span class="token operator">:</span> <span class="token string">\'absolute w-full h-full inset-0 opacity-0 z-10 m-0\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BaseSwitch</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">slotProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>slotProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>See our <a href="/base-ui/guides/working-with-tailwind-css/">Working with Tailwind\xa0CSS guide</a> for more information about integrating Base\xa0UI and Tailwind\xa0CSS.</p>\n<h4>Styled components</h4><p>If you use a CSS-in-JS solution with a styled-components-like API (such as <a href="/system/getting-started/">MUI\xa0System</a> or <a href="https://emotion.sh/docs/introduction">Emotion</a>), the best method is to provide the styled subcomponents using the <a href="#overriding-subcomponent-slots"><code>slots</code> prop</a>, as shown in the <a href="#overriding-subcomponent-slots">demo below</a>.</p>\n<p>Alternatively, you can wrap the whole unstyled component in a <code>styled</code> utility and target the individual subcomponents using CSS classes:</p>\n',{demo:"StylingSlotsSingleComponent.js",defaultCodeOpen:!0},'<hr>\n<h3 id="applying-custom-css-rules"><a href="#applying-custom-css-rules" class="title-link-to-anchor">Applying custom CSS rules<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="applying-custom-css-rules"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you&#39;re happy with the default structure of a component&#39;s rendered HTML, you can apply custom styles to the component&#39;s classes.</p>\n<p>Each component has its own set of classes.\nSome classes are <strong>static</strong>, which is to say that they are always present on the component.\nOthers are applied <strong>conditionally</strong>—like <code>base--disabled</code>, for example, which is only present when a component is disabled.</p>\n<p>Each component&#39;s API documentation lists all classes that the component uses.\nAdditionally, you can import a <code>[componentName]Classes</code> object that describes all the classes a given component uses, as the following demo illustrates:</p>\n',{demo:"StylingCustomCss.js",defaultCodeOpen:!0},'<p>If you don&#39;t use these classes, you can clean up the DOM by disabling them.\nSee <a href="#disabling-default-css-classes">Disabling default CSS classes</a> for instructions.</p>\n<h3 id="overriding-subcomponent-slots"><a href="#overriding-subcomponent-slots" class="title-link-to-anchor">Overriding subcomponent slots<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="overriding-subcomponent-slots"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you want to make changes to a component&#39;s rendered HTML structure, you can override the default subcomponents (&quot;slots&quot;) using the <code>slots</code> and/or <code>component</code> prop—see <a href="/base-ui/getting-started/usage/#shared-props">&quot;Shared props&quot; on the Base Usage page</a> for more details.</p>\n<p>The following demo uses <a href="/base-ui/react-switch/">Switch</a> to show how to create a styled component by applying styles to three of its subcomponent slots: <code>root</code>, <code>thumb</code>, and <code>input</code>.</p>\n<p>Note that although this demo uses <a href="/system/styled/">MUI\xa0System</a> as a styling solution, you are free to choose any alternative.</p>\n',{demo:"StylingSlots.js"},'<p>The components you pass in the <code>slots</code> prop receive the <code>ownerState</code> prop from the top-level component (the &quot;owner&quot;).\nBy convention, it contains all props passed to the owner, merged with its rendering state.</p>\n<p>For example:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span> <span class="token attr-name">slots</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">thumb</span><span class="token operator">:</span> MyCustomThumb <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">data-foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>42<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>In this case, <code>MyCustomThumb</code> component receives the <code>ownerState</code> object with the following data:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token punctuation">{</span>\n  checked<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  disabled<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  focusVisible<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  readOnly<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  <span class="token string-property property">\'data-foo\'</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>You can use this object to style your component.</p>\n<aside class="MuiCallout-root MuiCallout-warning">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#warning-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>When inserting a component from a third-party library into a slot, you may encounter this warning: <code>&quot;React does not recognize the ownerState prop on a DOM element.&quot;</code>\nThis is because the custom component isn&#39;t prepared to receive the <code>ownerState</code> like a built-in library component would be.</p>\n\n</div></aside><p>If you need to use the <code>ownerState</code> to propagate some props to a third-party component, you must create a custom wrapper for this purpose.\nBut if you don&#39;t need the <code>ownerState</code> and just want to resolve the error, you can use the <code>prepareForSlot</code> utility:</p>\n',{demo:"PrepareForSlot.js",defaultCodeOpen:!0},'<h3 id="customizing-slot-props"><a href="#customizing-slot-props" class="title-link-to-anchor">Customizing slot props<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="customizing-slot-props"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Use the <code>slotProps</code> prop to customize the inner component props.\nThe most common use case is setting a class name, but you can set any prop, including event handlers.</p>\n<p>The following example shows how to add a custom class to two of the Switch&#39;s slots:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">Switch</span><span class="token punctuation">(</span>props<span class="token operator">:</span> SwitchProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> slotProps<span class="token operator">:</span> SwitchProps<span class="token punctuation">[</span><span class="token string">\'slotProps\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    thumb<span class="token operator">:</span> <span class="token punctuation">{</span>\n      className<span class="token operator">:</span> <span class="token string">\'my-thumb\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    track<span class="token operator">:</span> <span class="token punctuation">{</span>\n      className<span class="token operator">:</span> <span class="token string">\'my-track\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">slotProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>slotProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>switch:thumb</code> and <code>switch:class</code> are added unconditionally—they will always be present on the Switch component.</p>\n<p>You may need to apply a class only when a component is in a particular state.\nA good example is adding <code>on</code> and <code>off</code> classes to a Switch based on its checked state, as shown in the demo below:</p>\n',{demo:"SlotPropsCallback.js",defaultCodeOpen:!0},'<p>Here, instead of an object with props, the root slot receives a callback function.\nIts only parameter is <code>ownerState</code>, which is an object that describes the state of the &quot;owner component&quot;—the Switch in this case.\nThe <code>ownerState</code> holds all the props of the owner component (with defaults applied where applicable) and is augmented with the internal state of the component.\nIn the case of the Select, the additional information includes the <code>checked</code>, <code>disabled</code>, <code>focusVisible</code>, and <code>readOnly</code> boolean fields.</p>\n<h3 id="creating-custom-components-using-hooks"><a href="#creating-custom-components-using-hooks" class="title-link-to-anchor">Creating custom components using hooks<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="creating-custom-components-using-hooks"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you need complete control over a component&#39;s rendered HTML structure, you can build it with hooks.</p>\n<p>Hooks give you access to the <em>logic</em> that a component uses, but without any default structure.\nSee <a href="/base-ui/getting-started/usage/#components-vs-hooks">&quot;Components vs. hooks&quot; on the Base Usage page</a> for more details.</p>\n<p>Hooks return the current state of the component (for example <code>checked</code>, <code>disabled</code>, <code>open</code>, etc.) and provide functions that return props you can apply to your fully custom components.</p>\n<p>In the case of <a href="/base-ui/react-switch/">Switch</a>, the component is accompanied by the <code>useSwitch</code> hook which gives you all of the functionality without any structure.</p>\n<p>It returns the following object:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token punctuation">{</span>\n  checked<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">;</span>\n  disabled<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">;</span>\n  readOnly<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">;</span>\n  focusVisible<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token function-variable function">getInputProps</span><span class="token operator">:</span> <span class="token punctuation">(</span>otherProps<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token operator">=></span> SwitchInputProps<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>checked</code>, <code>disabled</code>, <code>readOnly</code>, and <code>focusVisible</code> fields represent the state of the switch.\nUse them to apply styling to your HTML elements.</p>\n<p>The <code>getInputProps</code> function can be used to get the props to place on an HTML <code>&lt;input&gt;</code> to make the switch accessible.</p>\n',{demo:"StylingHooks.js",defaultCodeOpen:!0},'<h2 id="disabling-default-css-classes"><a href="#disabling-default-css-classes" class="title-link-to-anchor">Disabling default CSS classes<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="disabling-default-css-classes"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>If you don&#39;t need the built-in classes on components, you may disable them.\nThis will clean up the DOM and can be useful especially if you apply your own classes or style components using a CSS-in-JS solution.\nTo do this, wrap your components in a ClassNameConfigurator component (imported from <code>@mui/base/utils</code>):</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ClassNameConfigurator</span></span> <span class="token attr-name">disableDefaultClasses</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token constant">I</span>\'m classless<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ClassNameConfigurator</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Inspect the elements in the following demo to see the difference:</p>\n',{demo:"DisabledDefaultClasses.js"}],toc:[{text:"Styling the components",level:2,hash:"styling-the-components",children:[{text:"Which option to choose?",level:3,hash:"which-option-to-choose"},{text:"Applying custom CSS rules",level:3,hash:"applying-custom-css-rules"},{text:"Overriding subcomponent slots",level:3,hash:"overriding-subcomponent-slots"},{text:"Customizing slot props",level:3,hash:"customizing-slot-props"},{text:"Creating custom components using hooks",level:3,hash:"creating-custom-components-using-hooks"}]},{text:"Disabling default CSS classes",level:2,hash:"disabling-default-css-classes",children:[]}],title:"Customizing Base\xa0UI components",headers:{components:[]}}},X={"StylingCustomCss.js":{module:"./StylingCustomCss.js",raw:"import * as React from 'react';\nimport { Switch as SwitchUnstyled, switchClasses } from '@mui/base/Switch';\n\nconst css = `\n  .my-switch {\n    font-size: 0;\n    position: relative;\n    display: inline-block;\n    width: 32px;\n    height: 20px;\n    background: #B3C3D3;\n    border-radius: 10px;\n    margin: 10px;\n    cursor: pointer;\n  }\n\n  .my-switch.${switchClasses.checked} {\n    background: #007FFF;\n  }\n\n  .my-switch .${switchClasses.thumb} {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #FFF;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  .my-switch.${switchClasses.checked} .${switchClasses.thumb} {\n    left: 14px;\n    top: 3px;\n    background-color: #FFF;\n  }\n\n  .my-switch .${switchClasses.input} {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }`;\n\nexport default function StylingCustomCss() {\n  return (\n    <div>\n      <style type=\"text/css\">{css}</style>\n      <SwitchUnstyled className=\"my-switch\" />\n    </div>\n  );\n}\n",jsxPreview:'<style type="text/css">{css}</style>\n<SwitchUnstyled className="my-switch" />',moduleTS:"./StylingCustomCss.js",rawTS:"import * as React from 'react';\nimport { Switch as SwitchUnstyled, switchClasses } from '@mui/base/Switch';\n\nconst css = `\n  .my-switch {\n    font-size: 0;\n    position: relative;\n    display: inline-block;\n    width: 32px;\n    height: 20px;\n    background: #B3C3D3;\n    border-radius: 10px;\n    margin: 10px;\n    cursor: pointer;\n  }\n\n  .my-switch.${switchClasses.checked} {\n    background: #007FFF;\n  }\n\n  .my-switch .${switchClasses.thumb} {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #FFF;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  .my-switch.${switchClasses.checked} .${switchClasses.thumb} {\n    left: 14px;\n    top: 3px;\n    background-color: #FFF;\n  }\n\n  .my-switch .${switchClasses.input} {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }`;\n\nexport default function StylingCustomCss() {\n  return (\n    <div>\n      <style type=\"text/css\">{css}</style>\n      <SwitchUnstyled className=\"my-switch\" />\n    </div>\n  );\n}\n"},"StylingSlotsSingleComponent.js":{module:"./StylingSlotsSingleComponent.js",raw:"import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { Switch as BaseSwitch, switchClasses } from '@mui/base/Switch';\n\nconst Switch = styled(BaseSwitch)`\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  & .${switchClasses.thumb} {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #fff;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  & .${switchClasses.input} {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }\n\n  &.${switchClasses.disabled} {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.${switchClasses.checked} {\n    background: #007fff;\n\n    & .${switchClasses.thumb} {\n      left: 14px;\n      top: 3px;\n      background-color: #fff;\n    }\n  }\n\n  &.${switchClasses.focusVisible} .${switchClasses.thumb} {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n`;\n\nexport default function StylingSlotsSingleComponent() {\n  return <Switch />;\n}\n",jsxPreview:"<Switch />",moduleTS:"./StylingSlotsSingleComponent.js",rawTS:"import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { Switch as BaseSwitch, switchClasses } from '@mui/base/Switch';\n\nconst Switch = styled(BaseSwitch)`\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  & .${switchClasses.thumb} {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #fff;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  & .${switchClasses.input} {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }\n\n  &.${switchClasses.disabled} {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.${switchClasses.checked} {\n    background: #007fff;\n\n    & .${switchClasses.thumb} {\n      left: 14px;\n      top: 3px;\n      background-color: #fff;\n    }\n  }\n\n  &.${switchClasses.focusVisible} .${switchClasses.thumb} {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n`;\n\nexport default function StylingSlotsSingleComponent() {\n  return <Switch />;\n}\n"},"StylingSlots.js":{module:"./StylingSlots.js",raw:"import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { Switch, switchClasses } from '@mui/base/Switch';\n\nconst SwitchRoot = styled('span')`\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  &.${switchClasses.disabled} {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.${switchClasses.checked} {\n    background: #007fff;\n  }\n`;\n\nconst SwitchThumb = styled('span')`\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  .${switchClasses.focusVisible} & {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n\n  .${switchClasses.checked} > & {\n    left: 14px;\n    top: 3px;\n    background-color: #fff;\n  }\n`;\n\nconst SwitchInput = styled('input')`\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n`;\n\nexport default function StylingSlots() {\n  return (\n    <Switch slots={{ root: SwitchRoot, thumb: SwitchThumb, input: SwitchInput }} />\n  );\n}\n",jsxPreview:"<Switch slots={{ root: SwitchRoot, thumb: SwitchThumb, input: SwitchInput }} />",moduleTS:"./StylingSlots.js",rawTS:"import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { Switch, switchClasses } from '@mui/base/Switch';\n\nconst SwitchRoot = styled('span')`\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  &.${switchClasses.disabled} {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.${switchClasses.checked} {\n    background: #007fff;\n  }\n`;\n\nconst SwitchThumb = styled('span')`\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  .${switchClasses.focusVisible} & {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n\n  .${switchClasses.checked} > & {\n    left: 14px;\n    top: 3px;\n    background-color: #fff;\n  }\n`;\n\nconst SwitchInput = styled('input')`\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n`;\n\nexport default function StylingSlots() {\n  return (\n    <Switch slots={{ root: SwitchRoot, thumb: SwitchThumb, input: SwitchInput }} />\n  );\n}\n"},"PrepareForSlot.js":{module:"./PrepareForSlot.js",raw:"import * as React from 'react';\nimport { prepareForSlot } from '@mui/base/utils';\nimport { Button } from '@mui/base/Button';\nimport Link from 'next/link';\n\nconst LinkSlot = prepareForSlot(Link);\n\nexport default function PrepareForSlot() {\n  return (\n    <Button href=\"/\" slots={{ root: LinkSlot }} prefetch={false}>\n      Home\n    </Button>\n  );\n}\n",jsxPreview:'<Button<typeof LinkSlot> href="/" slots={{ root: LinkSlot }} prefetch={false}>\n  Home\n</Button>',moduleTS:"./PrepareForSlot.js",rawTS:"import * as React from 'react';\nimport { prepareForSlot } from '@mui/base/utils';\nimport { Button } from '@mui/base/Button';\nimport Link from 'next/link';\n\nconst LinkSlot = prepareForSlot(Link);\n\nexport default function PrepareForSlot() {\n  return (\n    <Button<typeof LinkSlot> href=\"/\" slots={{ root: LinkSlot }} prefetch={false}>\n      Home\n    </Button>\n  );\n}\n"},"SlotPropsCallback.js":{module:"./SlotPropsCallback.js",raw:"import * as React from 'react';\nimport { Switch } from '@mui/base/Switch';\n\nconst css = `\n  .my-switch {\n    font-size: 0;\n    position: relative;\n    display: inline-block;\n    width: 32px;\n    height: 20px;\n    background: #B3C3D3;\n    border-radius: 10px;\n    margin: 10px;\n    cursor: pointer;\n  }\n\n  .my-switch.on {\n    background: #007FFF;\n  }\n\n  .my-switch.focused .base-Switch-thumb {\n    background-color: rgba(255, 255, 255, 1);\n    box-shadow: 0 0 1px 8px rgba(0, 0, 0, 0.25);\n  }\n\n  .my-switch .base-Switch-thumb {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #FFF;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  .my-switch.on .base-Switch-thumb {\n    left: 14px;\n    top: 3px;\n    background-color: #FFF;\n  }\n\n  .my-switch .base-Switch-input {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }`;\n\nexport default function SlotPropsCallback() {\n  const slotProps = {\n    root: (ownerState) => ({\n      className: `my-switch ${ownerState.checked ? 'on' : 'off'} ${\n        ownerState.focusVisible ? 'focused' : ''\n      }`,\n    }),\n  };\n\n  return (\n    <div>\n      <style type=\"text/css\">{css}</style>\n      <Switch slotProps={slotProps} />\n    </div>\n  );\n}\n",jsxPreview:'<style type="text/css">{css}</style>\n<Switch slotProps={slotProps} />',moduleTS:"./SlotPropsCallback.js",rawTS:"import * as React from 'react';\nimport { Switch, SwitchOwnerState } from '@mui/base/Switch';\n\nconst css = `\n  .my-switch {\n    font-size: 0;\n    position: relative;\n    display: inline-block;\n    width: 32px;\n    height: 20px;\n    background: #B3C3D3;\n    border-radius: 10px;\n    margin: 10px;\n    cursor: pointer;\n  }\n\n  .my-switch.on {\n    background: #007FFF;\n  }\n\n  .my-switch.focused .base-Switch-thumb {\n    background-color: rgba(255, 255, 255, 1);\n    box-shadow: 0 0 1px 8px rgba(0, 0, 0, 0.25);\n  }\n\n  .my-switch .base-Switch-thumb {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #FFF;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  .my-switch.on .base-Switch-thumb {\n    left: 14px;\n    top: 3px;\n    background-color: #FFF;\n  }\n\n  .my-switch .base-Switch-input {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }`;\n\nexport default function SlotPropsCallback() {\n  const slotProps = {\n    root: (ownerState: SwitchOwnerState) => ({\n      className: `my-switch ${ownerState.checked ? 'on' : 'off'} ${\n        ownerState.focusVisible ? 'focused' : ''\n      }`,\n    }),\n  };\n\n  return (\n    <div>\n      <style type=\"text/css\">{css}</style>\n      <Switch slotProps={slotProps} />\n    </div>\n  );\n}\n"},"StylingHooks.js":{module:"./StylingHooks.js",raw:"import * as React from 'react';\nimport clsx from 'clsx';\nimport { useSwitch } from '@mui/base/useSwitch';\nimport { styled } from '@mui/system';\n\nconst SwitchRoot = styled('span')`\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  &.Switch-disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.Switch-checked {\n    background: #007fff;\n  }\n`;\n\nconst SwitchInput = styled('input')`\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n`;\n\nconst SwitchThumb = styled('span')`\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  &.Switch-focusVisible {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n\n  &.Switch-checked {\n    left: 14px;\n    top: 3px;\n    background-color: #fff;\n  }\n`;\n\nfunction Switch(props) {\n  const { getInputProps, checked, disabled, focusVisible } = useSwitch(props);\n\n  const stateClasses = {\n    'Switch-checked': checked,\n    'Switch-disabled': disabled,\n    'Switch-focusVisible': focusVisible,\n  };\n\n  return (\n    <SwitchRoot className={clsx(stateClasses)}>\n      <SwitchThumb className={clsx(stateClasses)} />\n      <SwitchInput {...getInputProps()} aria-label={props['aria-label']} />\n    </SwitchRoot>\n  );\n}\n\nexport default function StylingHooks() {\n  return <Switch aria-label=\"Demo switch\" />;\n}\n",jsxPreview:'<Switch aria-label="Demo switch" />',moduleTS:"./StylingHooks.js",rawTS:"import * as React from 'react';\nimport clsx from 'clsx';\nimport { useSwitch, UseSwitchParameters } from '@mui/base/useSwitch';\nimport { styled } from '@mui/system';\n\nconst SwitchRoot = styled('span')`\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  &.Switch-disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.Switch-checked {\n    background: #007fff;\n  }\n`;\n\nconst SwitchInput = styled('input')`\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n`;\n\nconst SwitchThumb = styled('span')`\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  &.Switch-focusVisible {\n    background-color: rgb(255 255 255 / 1);\n    box-shadow: 0 0 1px 8px rgb(0 0 0 / 0.25);\n  }\n\n  &.Switch-checked {\n    left: 14px;\n    top: 3px;\n    background-color: #fff;\n  }\n`;\n\nfunction Switch(props: UseSwitchParameters & { 'aria-label'?: string }) {\n  const { getInputProps, checked, disabled, focusVisible } = useSwitch(props);\n\n  const stateClasses = {\n    'Switch-checked': checked,\n    'Switch-disabled': disabled,\n    'Switch-focusVisible': focusVisible,\n  };\n\n  return (\n    <SwitchRoot className={clsx(stateClasses)}>\n      <SwitchThumb className={clsx(stateClasses)} />\n      <SwitchInput {...getInputProps()} aria-label={props['aria-label']} />\n    </SwitchRoot>\n  );\n}\n\nexport default function StylingHooks() {\n  return <Switch aria-label=\"Demo switch\" />;\n}\n"},"DisabledDefaultClasses.js":{module:"./DisabledDefaultClasses.js",raw:"import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { Switch } from '@mui/base/Switch';\nimport { ClassNameConfigurator } from '@mui/base';\n\nconst Root = styled('span')(\n  ({ ownerState }) => `\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  ${\n    ownerState.disabled\n      ? `opacity: 0.4;\n         cursor: not-allowed;`\n      : ''\n  }\n\n  ${ownerState.checked ? 'background: #007fff;' : ''}\n`,\n);\n\nconst Thumb = styled('span')(\n  ({ ownerState }) => `\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  ${\n    ownerState.focusVisible\n      ? `background-color: rgba(255, 255, 255, 1);\n         box-shadow: 0 0 1px 8px rgba(0, 0, 0, 0.25);`\n      : ''\n  }\n\n  ${\n    ownerState.checked\n      ? `left: 14px;\n         top: 3px;\n         background-color: #fff;`\n      : ''\n  }\n`,\n);\n\nconst Input = styled('input')`\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n`;\n\nconst slots = { root: Root, thumb: Thumb, input: Input };\n\nexport default function DisabledDefaultClasses() {\n  return (\n    <div>\n      {/* The built-in classes (base-Switch-root, base--checked, etc.) are enabled by default,\n           even though they are not used */}\n      <Switch\n        slots={slots}\n        slotProps={{ input: { 'aria-label': 'Switch with built-in classes' } }}\n      />\n      <ClassNameConfigurator disableDefaultClasses>\n        {/* ClassNameConfigurator removes the built-in classes,\n             leaving only the one generated by Emotion */}\n        <Switch\n          slots={slots}\n          slotProps={{ input: { 'aria-label': 'Switch without built-in classes' } }}\n        />\n      </ClassNameConfigurator>\n    </div>\n  );\n}\n",jsxPreview:"{/* The built-in classes (base-Switch-root, base--checked, etc.) are enabled by default,\n    even though they are not used */}\n<Switch\n  slots={slots}\n  slotProps={{ input: { 'aria-label': 'Switch with built-in classes' } }}\n/>\n<ClassNameConfigurator disableDefaultClasses>\n  {/* ClassNameConfigurator removes the built-in classes,\n      leaving only the one generated by Emotion */}\n  <Switch\n    slots={slots}\n    slotProps={{ input: { 'aria-label': 'Switch without built-in classes' } }}\n  />\n</ClassNameConfigurator>",moduleTS:"./DisabledDefaultClasses.js",rawTS:"import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { Switch, SwitchRootSlotProps, SwitchThumbSlotProps } from '@mui/base/Switch';\nimport { ClassNameConfigurator } from '@mui/base';\n\nconst Root = styled('span')(\n  ({ ownerState }: SwitchRootSlotProps) => `\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #b3c3d3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  ${\n    ownerState.disabled\n      ? `opacity: 0.4;\n         cursor: not-allowed;`\n      : ''\n  }\n\n  ${ownerState.checked ? 'background: #007fff;' : ''}\n`,\n);\n\nconst Thumb = styled('span')(\n  ({ ownerState }: SwitchThumbSlotProps) => `\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #fff;\n  position: relative;\n  transition: all 200ms ease;\n\n  ${\n    ownerState.focusVisible\n      ? `background-color: rgba(255, 255, 255, 1);\n         box-shadow: 0 0 1px 8px rgba(0, 0, 0, 0.25);`\n      : ''\n  }\n\n  ${\n    ownerState.checked\n      ? `left: 14px;\n         top: 3px;\n         background-color: #fff;`\n      : ''\n  }\n`,\n);\n\nconst Input = styled('input')`\n  cursor: inherit;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 1;\n  margin: 0;\n`;\n\nconst slots = { root: Root, thumb: Thumb, input: Input };\n\nexport default function DisabledDefaultClasses() {\n  return (\n    <div>\n      {/* The built-in classes (base-Switch-root, base--checked, etc.) are enabled by default,\n          even though they are not used */}\n      <Switch\n        slots={slots}\n        slotProps={{ input: { 'aria-label': 'Switch with built-in classes' } }}\n      />\n      <ClassNameConfigurator disableDefaultClasses>\n        {/* ClassNameConfigurator removes the built-in classes,\n            leaving only the one generated by Emotion */}\n        <Switch\n          slots={slots}\n          slotProps={{ input: { 'aria-label': 'Switch without built-in classes' } }}\n        />\n      </ClassNameConfigurator>\n    </div>\n  );\n}\n"}};X.scope={process:{},import:{react:g,"@mui/base/Switch":x,"@mui/system":S,"@mui/base/utils":C,"@mui/base/Button":v,"next/link":P,clsx:z,"@mui/base/useSwitch":F,"@mui/base":M}};var G={"./StylingCustomCss.js":function(){return o||(o=(0,I.jsxs)("div",{children:[(0,I.jsx)("style",{type:"text/css",children:B}),(0,I.jsx)($.r,{className:"my-switch"})]}))},"./StylingSlotsSingleComponent.js":function(){return e||(e=(0,I.jsx)(V,{}))},"./StylingSlots.js":function(){return(0,I.jsx)($.r,{slots:{root:Z,thumb:R,input:D}})},"./PrepareForSlot.js":function(){return(0,I.jsx)(O.z,{href:"/",slots:{root:U},prefetch:!1,children:"Home"})},"./SlotPropsCallback.js":function(){return(0,I.jsxs)("div",{children:[l||(l=(0,I.jsx)("style",{type:"text/css",children:"\n  .my-switch {\n    font-size: 0;\n    position: relative;\n    display: inline-block;\n    width: 32px;\n    height: 20px;\n    background: #B3C3D3;\n    border-radius: 10px;\n    margin: 10px;\n    cursor: pointer;\n  }\n\n  .my-switch.on {\n    background: #007FFF;\n  }\n\n  .my-switch.focused .base-Switch-thumb {\n    background-color: rgba(255, 255, 255, 1);\n    box-shadow: 0 0 1px 8px rgba(0, 0, 0, 0.25);\n  }\n\n  .my-switch .base-Switch-thumb {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #FFF;\n    position: relative;\n    transition: all 200ms ease;\n  }\n\n  .my-switch.on .base-Switch-thumb {\n    left: 14px;\n    top: 3px;\n    background-color: #FFF;\n  }\n\n  .my-switch .base-Switch-input {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }"})),(0,I.jsx)($.r,{slotProps:{root:function(n){return{className:"my-switch ".concat(n.checked?"on":"off"," ").concat(n.focusVisible?"focused":"")}}}})]})},"./StylingHooks.js":function(){return h||(h=(0,I.jsx)(K,{"aria-label":"Demo switch"}))},"./DisabledDefaultClasses.js":function(){return(0,I.jsxs)("div",{children:[(0,I.jsx)($.r,{slots:J,slotProps:{input:{"aria-label":"Switch with built-in classes"}}}),(0,I.jsx)(W.A,{disableDefaultClasses:!0,children:(0,I.jsx)($.r,{slots:J,slotProps:{input:{"aria-label":"Switch without built-in classes"}}})})]})}},Q={};function nn(){return(0,I.jsx)(f.Z,(0,b.Z)({},k))}nn.getLayout=function(n){return(0,I.jsx)(y.ZP,{children:n})}},32286:function(n,s,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/base-ui/getting-started/customization",function(){return t(795274)}])}},function(n){n.O(0,[49774,9535,73976,97146,59727,85925,17376,41373,15686,34800,28562,56831,22274,89068,48003,45678,31082,39987,71427,75794,53301,66215,37654,11423,42378,20759,16067,40332,97683,12589,71741,1478,84223,26704,92888,40179],function(){return n(n.s=32286)}),_N_E=n.O()}]);