(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[98934,39519],{333897:function(n,s,a){var t=a(915012),e=/^\s+/;n.exports=function(n){return n?n.slice(0,t(n)+1).replace(e,""):n}},915012:function(n){var s=/\s/;n.exports=function(n){for(var a=n.length;a--&&s.test(n.charAt(a)););return a}},889678:function(n,s,a){var t=a(706627),e=a(885365),p=a(67948),o=Math.max,c=Math.min;n.exports=function(n,s,a){var l,i,r,u,k,d,m=0,h=!1,g=!1,y=!0;if("function"!=typeof n)throw TypeError("Expected a function");function f(s){var a=l,t=i;return l=i=void 0,m=s,u=n.apply(t,a)}function v(n){var a=n-d,t=n-m;return void 0===d||a>=s||a<0||g&&t>=r}function C(){var n,a,t,p=e();if(v(p))return b(p);k=setTimeout(C,(n=p-d,a=p-m,t=s-n,g?c(t,r-a):t))}function b(n){return(k=void 0,y&&l)?f(n):(l=i=void 0,u)}function x(){var n,a=e(),t=v(a);if(l=arguments,i=this,d=a,t){if(void 0===k)return m=n=d,k=setTimeout(C,s),h?f(n):u;if(g)return clearTimeout(k),k=setTimeout(C,s),f(d)}return void 0===k&&(k=setTimeout(C,s)),u}return s=p(s)||0,t(a)&&(h=!!a.leading,r=(g="maxWait"in a)?o(p(a.maxWait)||0,s):r,y="trailing"in a?!!a.trailing:y),x.cancel=function(){void 0!==k&&clearTimeout(k),m=0,l=d=i=k=void 0},x.flush=function(){return void 0===k?u:b(e())},x}},706627:function(n){n.exports=function(n){var s=typeof n;return null!=n&&("object"==s||"function"==s)}},885365:function(n,s,a){var t=a(573401);n.exports=function(){return t.Date.now()}},123763:function(n,s,a){var t=a(889678),e=a(706627);n.exports=function(n,s,a){var p=!0,o=!0;if("function"!=typeof n)throw TypeError("Expected a function");return e(a)&&(p="leading"in a?!!a.leading:p,o="trailing"in a?!!a.trailing:o),t(n,s,{leading:p,maxWait:s,trailing:o})}},67948:function(n,s,a){var t=a(333897),e=a(706627),p=a(42848),o=0/0,c=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,i=/^0o[0-7]+$/i,r=parseInt;n.exports=function(n){if("number"==typeof n)return n;if(p(n))return o;if(e(n)){var s="function"==typeof n.valueOf?n.valueOf():n;n=e(s)?s+"":s}if("string"!=typeof n)return 0===n?n:+n;n=t(n);var a=l.test(n);return a||i.test(n)?r(n.slice(2),a?2:8):c.test(n)?o:+n}},994471:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return i}}),a(470079);var t,e=a(652755),p={en:{description:"A step-by-step migration guide to start using CSS theme variables in your project.",location:"/docs/data/material/migration/migration-v5/migration-css-theme-variables.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="error-icon" viewBox="0 0 20 20">\n      <path fill-rule="evenodd" d="M2 7.4v5.2a2 2 0 0 0 .586 1.414l3.4 3.4A2 2 0 0 0 7.4 18h5.2a2 2 0 0 0 1.414-.586l3.4-3.4A2 2 0 0 0 18 12.6V7.4a2 2 0 0 0-.586-1.414l-3.4-3.4A2 2 0 0 0 12.6 2H7.4a2 2 0 0 0-1.414.586l-3.4 3.4A2 2 0 0 0 2 7.4Zm11.03-.43a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="warning-icon" viewBox="0 0 20 20">\n      <path d="M2.33 17a.735.735 0 0 1-.665-.375.631.631 0 0 1-.094-.375.898.898 0 0 1 .115-.396L9.353 3.062a.621.621 0 0 1 .281-.27.85.85 0 0 1 .729 0 .622.622 0 0 1 .281.27l7.667 12.792c.07.125.108.257.114.396a.63.63 0 0 1-.093.375.842.842 0 0 1-.271.27.728.728 0 0 1-.394.105H2.33Zm7.664-2.5c.211 0 .39-.072.536-.214a.714.714 0 0 0 .218-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.531-.22.736.736 0 0 0-.536.215.714.714 0 0 0-.219.531c0 .212.072.39.215.536.143.146.32.219.531.219Zm0-2.5c.211 0 .39-.072.536-.216a.72.72 0 0 0 .218-.534v-2.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.531-.216.734.734 0 0 0-.536.216.72.72 0 0 0-.219.534v2.5c0 .212.072.39.215.534a.72.72 0 0 0 .531.216Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="success-icon" viewBox="0 0 20 20">\n      <path d="m8.938 10.875-1.25-1.23a.718.718 0 0 0-.521-.228.718.718 0 0 0-.521.229.73.73 0 0 0 0 1.062l1.77 1.771c.153.153.327.23.521.23a.718.718 0 0 0 .521-.23l3.896-3.896a.73.73 0 0 0 0-1.062.718.718 0 0 0-.52-.23.718.718 0 0 0-.521.23l-3.376 3.354ZM10 18a7.796 7.796 0 0 1-3.104-.625 8.065 8.065 0 0 1-2.552-1.719 8.064 8.064 0 0 1-1.719-2.552A7.797 7.797 0 0 1 2 10c0-1.111.208-2.15.625-3.115a8.064 8.064 0 0 1 4.27-4.26A7.797 7.797 0 0 1 10 2c1.111 0 2.15.208 3.115.625a8.096 8.096 0 0 1 4.26 4.26C17.792 7.851 18 8.89 18 10a7.797 7.797 0 0 1-.625 3.104 8.066 8.066 0 0 1-4.26 4.271A7.774 7.774 0 0 1 10 18Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="info-icon" viewBox="0 0 20 20">\n      <path d="M9.996 14c.21 0 .39-.072.535-.216a.72.72 0 0 0 .219-.534v-3.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.532-.216.734.734 0 0 0-.535.216.72.72 0 0 0-.219.534v3.5c0 .213.071.39.214.534a.72.72 0 0 0 .532.216Zm0-6.5c.21 0 .39-.071.535-.214a.714.714 0 0 0 .219-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.532-.219.736.736 0 0 0-.535.214.714.714 0 0 0-.219.532c0 .21.071.39.214.535.143.146.32.219.532.219Zm.01 10.5a7.81 7.81 0 0 1-3.11-.625 8.065 8.065 0 0 1-2.552-1.719 8.066 8.066 0 0 1-1.719-2.551A7.818 7.818 0 0 1 2 9.99c0-1.104.208-2.14.625-3.105a8.066 8.066 0 0 1 4.27-4.26A7.818 7.818 0 0 1 10.009 2a7.75 7.75 0 0 1 3.106.625 8.083 8.083 0 0 1 4.26 4.265A7.77 7.77 0 0 1 18 9.994a7.81 7.81 0 0 1-.625 3.11 8.066 8.066 0 0 1-1.719 2.552 8.083 8.083 0 0 1-2.546 1.719 7.77 7.77 0 0 1-3.104.625Z"/>\n      </symbol>\n      </svg>','\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n        <symbol id="anchor-link-icon" viewBox="0 0 12 6">\n          <path d="M8.9176 0.083252H7.1676C6.84677 0.083252 6.58427 0.345752 6.58427 0.666585C6.58427 0.987419 6.84677 1.24992 7.1676 1.24992H8.9176C9.8801 1.24992 10.6676 2.03742 10.6676 2.99992C10.6676 3.96242 9.8801 4.74992 8.9176 4.74992H7.1676C6.84677 4.74992 6.58427 5.01242 6.58427 5.33325C6.58427 5.65409 6.84677 5.91659 7.1676 5.91659H8.9176C10.5276 5.91659 11.8343 4.60992 11.8343 2.99992C11.8343 1.38992 10.5276 0.083252 8.9176 0.083252ZM3.6676 2.99992C3.6676 3.32075 3.9301 3.58325 4.25094 3.58325H7.75094C8.07177 3.58325 8.33427 3.32075 8.33427 2.99992C8.33427 2.67909 8.07177 2.41659 7.75094 2.41659H4.25094C3.9301 2.41659 3.6676 2.67909 3.6676 2.99992ZM4.83427 4.74992H3.08427C2.12177 4.74992 1.33427 3.96242 1.33427 2.99992C1.33427 2.03742 2.12177 1.24992 3.08427 1.24992H4.83427C5.1551 1.24992 5.4176 0.987419 5.4176 0.666585C5.4176 0.345752 5.1551 0.083252 4.83427 0.083252H3.08427C1.47427 0.083252 0.167603 1.38992 0.167603 2.99992C0.167603 4.60992 1.47427 5.91659 3.08427 5.91659H4.83427C5.1551 5.91659 5.4176 5.65409 5.4176 5.33325C5.4176 5.01242 5.1551 4.74992 4.83427 4.74992Z" />\n        </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n      <path d="M22.8481 4C22.8481 2.9 21.9481 2 20.8481 2H4.84814C3.74814 2 2.84814 2.9 2.84814 4V16C2.84814 17.1 3.74814 18 4.84814 18H18.8481L22.8481 22V4ZM16.8481 11H13.8481V14C13.8481 14.55 13.3981 15 12.8481 15C12.2981 15 11.8481 14.55 11.8481 14V11H8.84814C8.29814 11 7.84814 10.55 7.84814 10C7.84814 9.45 8.29814 9 8.84814 9H11.8481V6C11.8481 5.45 12.2981 5 12.8481 5C13.3981 5 13.8481 5.45 13.8481 6V9H16.8481C17.3981 9 17.8481 9.45 17.8481 10C17.8481 10.55 17.3981 11 16.8481 11Z" />\n      </symbol>\n      </svg>','<h1>Migrating to CSS theme variables</h1><p class="description">A step-by-step migration guide to start using CSS theme variables in your project.</p>\n\n<p>This is a guide that shows how to migrate an existing Material\xa0UI project to CSS theme variables.\nThis migration offers a solution to a longstanding issue in which a user who prefers dark mode will see a flash of light mode when the page first loads.</p>\n<h2 id="1-add-the-new-provider"><a href="#1-add-the-new-provider" class="title-link-to-anchor">1. Add the new provider<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="1-add-the-new-provider"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><h3 id="without-a-custom-theme"><a href="#without-a-custom-theme" class="title-link-to-anchor">Without a custom theme<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="without-a-custom-theme"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you aren&#39;t using <a href="/material-ui/customization/theming/#theme-provider"><code>ThemeProvider</code></a>, then all you need to do is wrap your application with the <code>CssVarsProvider</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> CssVarsProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssVarsProvider</span></span><span class="token punctuation">></span></span><span class="token operator">...</span>your existing application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CssVarsProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>You should see the generated CSS theme variables in the stylesheet. Material\xa0UI components that render inside the new provider will automatically consume the variables.</p>\n<h3 id="custom-theme"><a href="#custom-theme" class="title-link-to-anchor">Custom theme<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="custom-theme"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you have a custom theme, you must replace <code>createTheme()</code> with the <code>extendTheme()</code> API.</p>\n<p>This moves palette customization to within the <code>colorSchemes</code> node.\nOther properties can be copied and pasted.</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { createTheme } from \'@mui/material/styles\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { extendTheme } from \'@mui/material/styles\';\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const lightTheme = createTheme({\n</span><span class="token prefix deleted">-</span><span class="token line">  palette: {\n</span><span class="token prefix deleted">-</span><span class="token line">   primary: {\n</span><span class="token prefix deleted">-</span><span class="token line">     main: \'#ff5252\',\n</span><span class="token prefix deleted">-</span><span class="token line">   },\n</span><span class="token prefix deleted">-</span><span class="token line">   ...\n</span><span class="token prefix deleted">-</span><span class="token line"> },\n</span><span class="token prefix deleted">-</span><span class="token line"> // ...other properties, for example breakpoints, spacing, shape, typography, components\n</span><span class="token prefix deleted">-</span><span class="token line">});\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const darkTheme = createTheme({\n</span><span class="token prefix deleted">-</span><span class="token line">  palette: {\n</span><span class="token prefix deleted">-</span><span class="token line">   mode: \'dark\',\n</span><span class="token prefix deleted">-</span><span class="token line">   primary: {\n</span><span class="token prefix deleted">-</span><span class="token line">     main: \'#000\',\n</span><span class="token prefix deleted">-</span><span class="token line">   },\n</span><span class="token prefix deleted">-</span><span class="token line">   ...\n</span><span class="token prefix deleted">-</span><span class="token line"> },\n</span><span class="token prefix deleted">-</span><span class="token line">});\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const theme = extendTheme({\n</span><span class="token prefix inserted">+</span><span class="token line">  colorSchemes: {\n</span><span class="token prefix inserted">+</span><span class="token line">    light: {\n</span><span class="token prefix inserted">+</span><span class="token line">      palette: {\n</span><span class="token prefix inserted">+</span><span class="token line">        primary: {\n</span><span class="token prefix inserted">+</span><span class="token line">          main: \'#ff5252\',\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">        ...\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">    },\n</span><span class="token prefix inserted">+</span><span class="token line">    dark: {\n</span><span class="token prefix inserted">+</span><span class="token line">      palette: {\n</span><span class="token prefix inserted">+</span><span class="token line">        primary: {\n</span><span class="token prefix inserted">+</span><span class="token line">          main: \'#000\',\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">        ...\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">    },\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span><span class="token prefix inserted">+</span><span class="token line">  // ...other properties\n</span><span class="token prefix inserted">+</span><span class="token line">});</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Then, replace the <code>ThemeProvider</code> with the <code>CssVarsProvider</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { ThemeProvider } from \'@mui/material/styles\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { CssVarsProvider } from \'@mui/material/styles\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const theme = extendTheme(...);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function App() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  return &lt;ThemeProvider theme={theme}>...&lt;/ThemeProvider>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  return &lt;CssVarsProvider theme={theme}>...&lt;/CssVarsProvider>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Save the file and start the development server.\nYour application should be able to run without crashing.</p>\n<aside class="MuiCallout-root MuiCallout-info">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#info-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>If you encounter any errors, please <a href="https://github.com/mui/material-ui/issues/new/choose">open an issue</a> to share it with us. We&#39;d love to help.</p>\n\n</div></aside><p>If you inspect the page, you will see the generated CSS variables in the stylesheet. Material\xa0UI components that render inside the new provider will automatically use the CSS theme variables.</p>\n<h2 id="2-remove-the-toggle-mode-logic"><a href="#2-remove-the-toggle-mode-logic" class="title-link-to-anchor">2. Remove the toggle mode logic<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="2-remove-the-toggle-mode-logic"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>You can remove your existing logic that handles the user-selected mode and replace it with the <code>useColorScheme</code> hook.</p>\n<p><strong>Before</strong>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// This is only a minimal example to demonstrate the migration.</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>mode<span class="token punctuation">,</span> setMode<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'mode\'</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">\'light\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">\'light\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// a new theme is created every time the mode changes</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      mode<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...your custom theme</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> newMode <span class="token operator">=</span> mode <span class="token operator">===</span> <span class="token string">\'light\'</span> <span class="token operator">?</span> <span class="token string">\'dark\'</span> <span class="token operator">:</span> <span class="token string">\'light\'</span><span class="token punctuation">;</span>\n          <span class="token function">setMode</span><span class="token punctuation">(</span>newMode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'mode\'</span><span class="token punctuation">,</span> newMode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span>mode <span class="token operator">===</span> <span class="token string">\'light\'</span> <span class="token operator">?</span> <span class="token string">\'Turn dark\'</span> <span class="token operator">:</span> <span class="token string">\'Turn light\'</span><span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span>\n      <span class="token operator">...</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>After</strong>:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> CssVarsProvider<span class="token punctuation">,</span> extendTheme<span class="token punctuation">,</span> useColorScheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">ModeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> mode<span class="token punctuation">,</span> setMode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useColorScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>\n      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">setMode</span><span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">\'light\'</span> <span class="token operator">?</span> <span class="token string">\'dark\'</span> <span class="token operator">:</span> <span class="token string">\'light\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>mode <span class="token operator">===</span> <span class="token string">\'light\'</span> <span class="token operator">?</span> <span class="token string">\'Turn dark\'</span> <span class="token operator">:</span> <span class="token string">\'Turn light\'</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">extendTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...your custom theme</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssVarsProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ModeToggle</span></span> <span class="token punctuation">/></span></span>\n      <span class="token operator">...</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CssVarsProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>useColorScheme</code> hook provides the user-selected <code>mode</code> and a function <code>setMode</code> to update the value.</p>\n<p>The <code>mode</code> is stored inside <code>CssVarsProvider</code> which handles local storage synchronization for you.</p>\n<h2 id="3-prevent-dark-mode-flickering-in-server-side-applications"><a href="#3-prevent-dark-mode-flickering-in-server-side-applications" class="title-link-to-anchor">3. Prevent dark-mode flickering in server-side applications<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="3-prevent-dark-mode-flickering-in-server-side-applications"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>The <code>getInitColorSchemeScript()</code> API prevents dark-mode flickering by returning a script that must be run before React.</p>\n<h3 id="next-js-pages-router"><a href="#next-js-pages-router" class="title-link-to-anchor">Next.js Pages Router<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="next-js-pages-router"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Place the script before <code>&lt;Main /&gt;</code> in your <a href="https://nextjs.org/docs/pages/building-your-application/routing/custom-document"><code>pages/_document.js</code></a>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> Document<span class="token punctuation">,</span> <span class="token punctuation">{</span> Html<span class="token punctuation">,</span> Head<span class="token punctuation">,</span> Main<span class="token punctuation">,</span> NextScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'next/document\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getInitColorSchemeScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyDocument</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Html</span></span> <span class="token attr-name">data-color-scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n          <span class="token punctuation">{</span><span class="token function">getInitColorSchemeScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NextScript</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Html</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="gatsby"><a href="#gatsby" class="title-link-to-anchor">Gatsby<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="gatsby"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Place the script in your <a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr/"><code>gatsby-ssr.js</code></a> file:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getInitColorSchemeScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">onRenderBody</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> setPreBodyComponents <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setPreBodyComponents</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getInitColorSchemeScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="4-refactor-custom-styles-to-use-the-attribute-selector"><a href="#4-refactor-custom-styles-to-use-the-attribute-selector" class="title-link-to-anchor">4. Refactor custom styles to use the attribute selector<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="4-refactor-custom-styles-to-use-the-attribute-selector"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Users will continue to encounter dark-mode flickering if your custom styles include conditional expressions, as shown below:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token comment">// theming example</span>\n<span class="token function">extendTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiChip</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">root</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span>\n            theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">\'dark\'</span>\n              <span class="token operator">?</span> <span class="token string">\'rgba(255 255 255 / 0.2)\'</span>\n              <span class="token operator">:</span> <span class="token string">\'rgba(0 0 0 / 0.2)\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or a custom component example</span>\n<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span>\n    theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">\'dark\'</span> <span class="token operator">?</span> <span class="token string">\'rgba(255 255 255 / 0.2)\'</span> <span class="token operator">:</span> <span class="token string">\'rgba(0 0 0 / 0.2)\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>This is because the <code>theme.palette.mode</code> is always <code>light</code> on the server.</p>\n<p>To fix this problem, replace conditional expressions with <code>theme.applyStyles()</code> instead:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token comment">// theming example</span>\n<span class="token function">extendTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiChip</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">root</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'rgba(0 0 0 / 0.2)\'</span><span class="token punctuation">,</span>\n          <span class="token operator">...</span>theme<span class="token punctuation">.</span><span class="token function">applyStyles</span><span class="token punctuation">(</span><span class="token string">\'dark\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'rgba(255 255 255 / 0.2)\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or a custom component example</span>\n<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'rgba(0 0 0 / 0.2)\'</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>theme<span class="token punctuation">.</span><span class="token function">applyStyles</span><span class="token punctuation">(</span><span class="token string">\'dark\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'rgba(255 255 255 / 0.2)\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><span class="MuiCode-copy-label">Copy</span><span class="MuiCode-copied-label">Copied</span><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<aside class="MuiCallout-root MuiCallout-info">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#info-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>The <code>theme.applyStyles()</code> is a new utility function available in Material\xa0UI v6 that applies the provided styles to the specified mode.</p>\n\n</div></aside><h2 id="5-test-dark-mode-flickering"><a href="#5-test-dark-mode-flickering" class="title-link-to-anchor">5. Test dark-mode flickering<span class="anchor-icon"><svg><use xlink:href="#anchor-link-icon" /></svg></span></a><button title="Post a comment" class="comment-link" data-feedback-hash="5-test-dark-mode-flickering"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><ol>\n<li>Toggle dark mode in your application</li>\n<li>Open DevTools and set the <a href="https://developer.chrome.com/docs/devtools/performance/#simulate_a_mobile_cpu">CPU throttling</a> to the lowest value (don&#39;t close the DevTools).</li>\n<li>Refresh the page. You should see the all components in dark mode at first glance.</li>\n</ol>\n'],toc:[{text:"1. Add the new provider",level:2,hash:"1-add-the-new-provider",children:[{text:"Without a custom theme",level:3,hash:"without-a-custom-theme"},{text:"Custom theme",level:3,hash:"custom-theme"}]},{text:"2. Remove the toggle mode logic",level:2,hash:"2-remove-the-toggle-mode-logic",children:[]},{text:"3. Prevent dark-mode flickering in server-side applications",level:2,hash:"3-prevent-dark-mode-flickering-in-server-side-applications",children:[{text:"Next.js Pages Router",level:3,hash:"next-js-pages-router"},{text:"Gatsby",level:3,hash:"gatsby"}]},{text:"4. Refactor custom styles to use the attribute selector",level:2,hash:"4-refactor-custom-styles-to-use-the-attribute-selector",children:[]},{text:"5. Test dark-mode flickering",level:2,hash:"5-test-dark-mode-flickering",children:[]}],title:"Migrating to CSS theme variables",headers:{components:[]}}},o={};o.scope={process:{},import:{}};var c={},l=a(735250);function i(){return t||(t=(0,l.jsx)(e.Z,{demos:o,docs:p,demoComponents:c}))}},652755:function(n,s,a){"use strict";a.d(s,{Z:function(){return C}});var t,e=a(778521),p=a(470079),o=a(639519),c=a.n(o),l=a(389136),i=a(302312),r=a(513182),u=a(597683),k=a(42141),d=a(162119),m=a(871379),h=a(775196),g=a(694366),y=a(74077),f=a(735250);function v(n){var s=n.mode,a=(0,r.tv)().setMode;return p.useEffect(function(){a(s)},[s,a]),null}function C(n){var s=(0,i.Z)(),a=(0,l.useRouter)(),o=(0,k.ln)(a.asPath).canonicalAs,c=n.disableAd,C=void 0!==c&&c,b=n.disableToc,x=n.disableCssVarsProvider,w=n.demos,M=void 0===w?{}:w,T=n.docs,P=n.demoComponents,S=n.srcComponents,j=T[(0,m.fO)()]||T.en,H=o.startsWith("/joy-ui/")&&!(void 0!==x&&x),A=H?r.lL:p.Fragment,V=H?h.BrandingProvider:p.Fragment,_=(0,e.Z)({},H&&{mode:s.palette.mode});return(0,f.jsxs)(d.Z,{cardOptions:{description:j.headers.cardDescription,title:j.headers.cardTitle},description:j.description,disableAd:C,disableToc:void 0!==b&&b,location:j.location,title:j.title,toc:j.toc,children:[C?null:t||(t=(0,f.jsx)(h.BrandingProvider,{children:(0,f.jsx)(y.Z,{children:(0,f.jsx)(g.ZP,{})})})),(0,f.jsxs)(A,{children:[H&&(0,f.jsx)(v,{mode:s.palette.mode}),j.rendered.map(function(n,a){return(0,f.jsx)(u.Z,{demoComponents:P,demos:M,disableAd:C,localizedDoc:j,renderedMarkdownOrDemo:n,srcComponents:S,theme:s,WrapperComponent:V,wrapperProps:_},"demos-section-".concat(a))})]})]})}v.propTypes={mode:c().oneOf(["light","dark"])}},608103:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/migration/migration-css-theme-variables",function(){return a(994471)}])},884835:function(n,s,a){"use strict";var t=a(311596);function e(){}function p(){}p.resetWarningCache=e,n.exports=function(){function n(n,s,a,e,p,o){if(o!==t){var c=Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function s(){return n}n.isRequired=n;var a={array:n,bigint:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,elementType:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s,exact:s,checkPropTypes:p,resetWarningCache:e};return a.PropTypes=a,a}},639519:function(n,s,a){n.exports=a(884835)()},311596:function(n){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}},function(n){n.O(0,[49774,9535,73976,97146,59727,85925,17376,41373,15686,34800,56831,22274,89068,48003,45678,31082,39987,71427,75794,53301,66215,37654,11423,42378,20759,16067,40332,97683,92888,40179],function(){return n(n.s=608103)}),_N_E=n.O()}]);